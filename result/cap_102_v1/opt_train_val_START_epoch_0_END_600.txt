Experiment: cap_102_v1
------------ Train and Test Options -----------------
base_save_folder: result
batch_size_test: 128
batch_size_train: 128
beta1: 0.9
cap_N: 4
cap_model: v2
connect_detail: all
dataset: cifar10
debug_mode: False
device_id: 0,1
draw_hist: False
experiment_name: cap_102_v1
fc_manner: default
file_name: result/cap_102_v1/opt_train_val_START_epoch_0_END_600.txt
gamma: 0.1
layerwise: False
less_data_aug: True
loss_form: margin
lr: 0.0001
manner: 1
manual_seed: -1
max_epoch: 600
measure_time: False
momentum: 0.9
more_skip: False
multi_crop_test: False
no_visdom: False
non_target_j: False
num_workers: 2
optim: adam
phase: train_val
port_id: 8000
random_seed: 3483
s35: False
save_epoch: 25
save_folder: result/cap_102_v1
schedule: [200, 300, 400]
show_freq: 100
show_test_after_epoch: 100
use_cuda: True
weight_decay: 0.0005
wider: False
------------------ End --------------------
DataParallel (
  (module): CapNet (
    (module0): Sequential (
      (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True)
      (2): ReLU (inplace)
    )
    (module1): CapConv2 (
      (main_conv): CapConv (
        (conv_adjust_blob_shape): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (block): Sequential (
          (0): capConvRoute1 (
            (main_cap): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (main_cap_coeff): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (res_cap): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (res_squash): conv_squash(num_shared=32)
          )
        )
        (last_bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
        (last_relu): ReLU ()
        (last_squash): conv_squash(num_shared=32)
      )
      (sub_conv): CapConv (
        (block): Sequential (
          (0): capConvRoute1 (
            (main_cap): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), groups=32)
            (main_cap_coeff): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (res_cap): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
            (res_squash): conv_squash(num_shared=32)
          )
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
          (2): ReLU (inplace)
          (3): conv_squash(num_shared=32)
          (4): capConvRoute1 (
            (main_cap): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), groups=32)
            (main_cap_coeff): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (res_cap): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
            (res_squash): conv_squash(num_shared=32)
          )
          (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
          (6): ReLU (inplace)
          (7): conv_squash(num_shared=32)
          (8): capConvRoute1 (
            (main_cap): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), groups=32)
            (main_cap_coeff): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (res_cap): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
            (res_squash): conv_squash(num_shared=32)
          )
          (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
          (10): ReLU (inplace)
          (11): conv_squash(num_shared=32)
          (12): capConvRoute1 (
            (main_cap): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), groups=32)
            (main_cap_coeff): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (res_cap): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
            (res_squash): conv_squash(num_shared=32)
          )
        )
        (last_bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
        (last_relu): ReLU ()
        (last_squash): conv_squash(num_shared=32)
      )
    )
    (module2): CapConv2 (
      (main_conv): CapConv (
        (conv_adjust_blob_shape): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        (block): Sequential (
          (0): capConvRoute1 (
            (main_cap): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32)
            (main_cap_coeff): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (res_cap): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (res_squash): conv_squash(num_shared=32)
          )
        )
        (last_bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
        (last_relu): ReLU ()
        (last_squash): conv_squash(num_shared=32)
      )
      (sub_conv): CapConv (
        (block): Sequential (
          (0): capConvRoute1 (
            (main_cap): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), groups=32)
            (main_cap_coeff): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (res_cap): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
            (res_squash): conv_squash(num_shared=32)
          )
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
          (2): ReLU (inplace)
          (3): conv_squash(num_shared=32)
          (4): capConvRoute1 (
            (main_cap): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), groups=32)
            (main_cap_coeff): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (res_cap): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
            (res_squash): conv_squash(num_shared=32)
          )
          (5): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
          (6): ReLU (inplace)
          (7): conv_squash(num_shared=32)
          (8): capConvRoute1 (
            (main_cap): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), groups=32)
            (main_cap_coeff): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (res_cap): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
            (res_squash): conv_squash(num_shared=32)
          )
          (9): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
          (10): ReLU (inplace)
          (11): conv_squash(num_shared=32)
          (12): capConvRoute1 (
            (main_cap): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), groups=32)
            (main_cap_coeff): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (res_cap): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
            (res_squash): conv_squash(num_shared=32)
          )
        )
        (last_bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
        (last_relu): ReLU ()
        (last_squash): conv_squash(num_shared=32)
      )
    )
    (module3): CapConv2 (
      (main_conv): CapConv (
        (conv_adjust_blob_shape): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        (block): Sequential (
          (0): capConvRoute1 (
            (main_cap): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32)
            (main_cap_coeff): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (res_cap): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (res_squash): conv_squash(num_shared=32)
          )
        )
        (last_bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
        (last_relu): ReLU ()
        (last_squash): conv_squash(num_shared=32)
      )
      (sub_conv): CapConv (
        (block): Sequential (
          (0): capConvRoute1 (
            (main_cap): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), groups=32)
            (main_cap_coeff): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (res_cap): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
            (res_squash): conv_squash(num_shared=32)
          )
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
          (2): ReLU (inplace)
          (3): conv_squash(num_shared=32)
          (4): capConvRoute1 (
            (main_cap): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), groups=32)
            (main_cap_coeff): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (res_cap): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
            (res_squash): conv_squash(num_shared=32)
          )
          (5): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
          (6): ReLU (inplace)
          (7): conv_squash(num_shared=32)
          (8): capConvRoute1 (
            (main_cap): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), groups=32)
            (main_cap_coeff): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (res_cap): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
            (res_squash): conv_squash(num_shared=32)
          )
          (9): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
          (10): ReLU (inplace)
          (11): conv_squash(num_shared=32)
          (12): capConvRoute1 (
            (main_cap): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), groups=32)
            (main_cap_coeff): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (res_cap): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
            (res_squash): conv_squash(num_shared=32)
          )
        )
        (last_bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
        (last_relu): ReLU ()
        (last_squash): conv_squash(num_shared=32)
      )
    )
    (module4): CapConv2 (
      (main_conv): CapConv (
        (conv_adjust_blob_shape): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        (block): Sequential (
          (0): capConvRoute1 (
            (main_cap): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32)
            (main_cap_coeff): Conv2d(512, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (res_cap): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (res_squash): conv_squash(num_shared=32)
          )
        )
        (last_bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
        (last_relu): ReLU ()
        (last_squash): conv_squash(num_shared=32)
      )
      (sub_conv): CapConv (
        (block): Sequential (
          (0): capConvRoute1 (
            (main_cap): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), groups=32)
            (main_cap_coeff): Conv2d(512, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (res_cap): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
            (res_squash): conv_squash(num_shared=32)
          )
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
          (2): ReLU (inplace)
          (3): conv_squash(num_shared=32)
          (4): capConvRoute1 (
            (main_cap): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), groups=32)
            (main_cap_coeff): Conv2d(512, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (res_cap): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
            (res_squash): conv_squash(num_shared=32)
          )
          (5): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
          (6): ReLU (inplace)
          (7): conv_squash(num_shared=32)
          (8): capConvRoute1 (
            (main_cap): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), groups=32)
            (main_cap_coeff): Conv2d(512, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (res_cap): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
            (res_squash): conv_squash(num_shared=32)
          )
          (9): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
          (10): ReLU (inplace)
          (11): conv_squash(num_shared=32)
          (12): capConvRoute1 (
            (main_cap): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), groups=32)
            (main_cap_coeff): Conv2d(512, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (res_cap): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
            (res_squash): conv_squash(num_shared=32)
          )
        )
        (last_bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
        (last_relu): ReLU ()
        (last_squash): conv_squash(num_shared=32)
      )
    )
    (final_cls): CapFC(in_cap_num=512, out_cap_num=10, cap_dim=16, fc_manner=default)
  ), weights=((32, 3, 3, 3), (32,), (32,), (32,), (64, 32, 3, 3), (64,), (64, 1, 3, 3), (64,), (32, 2, 3, 3), (32,), (64, 32, 3, 3), (64,), (64,), (64,), (64, 2, 1, 1), (64,), (32, 2, 3, 3), (32,), (64, 64, 1, 1), (64,), (64,), (64,), (64, 2, 1, 1), (64,), (32, 2, 3, 3), (32,), (64, 64, 1, 1), (64,), (64,), (64,), (64, 2, 1, 1), (64,), (32, 2, 3, 3), (32,), (64, 64, 1, 1), (64,), (64,), (64,), (64, 2, 1, 1), (64,), (32, 2, 3, 3), (32,), (64, 64, 1, 1), (64,), (64,), (64,), (128, 64, 3, 3), (128,), (128, 2, 3, 3), (128,), (32, 4, 3, 3), (32,), (128, 64, 3, 3), (128,), (128,), (128,), (128, 4, 1, 1), (128,), (32, 4, 3, 3), (32,), (128, 128, 1, 1), (128,), (128,), (128,), (128, 4, 1, 1), (128,), (32, 4, 3, 3), (32,), (128, 128, 1, 1), (128,), (128,), (128,), (128, 4, 1, 1), (128,), (32, 4, 3, 3), (32,), (128, 128, 1, 1), (128,), (128,), (128,), (128, 4, 1, 1), (128,), (32, 4, 3, 3), (32,), (128, 128, 1, 1), (128,), (128,), (128,), (256, 128, 3, 3), (256,), (256, 4, 3, 3), (256,), (32, 8, 3, 3), (32,), (256, 128, 3, 3), (256,), (256,), (256,), (256, 8, 1, 1), (256,), (32, 8, 3, 3), (32,), (256, 256, 1, 1), (256,), (256,), (256,), (256, 8, 1, 1), (256,), (32, 8, 3, 3), (32,), (256, 256, 1, 1), (256,), (256,), (256,), (256, 8, 1, 1), (256,), (32, 8, 3, 3), (32,), (256, 256, 1, 1), (256,), (256,), (256,), (256, 8, 1, 1), (256,), (32, 8, 3, 3), (32,), (256, 256, 1, 1), (256,), (256,), (256,), (512, 256, 3, 3), (512,), (512, 8, 3, 3), (512,), (32, 16, 3, 3), (32,), (512, 256, 3, 3), (512,), (512,), (512,), (512, 16, 1, 1), (512,), (32, 16, 3, 3), (32,), (512, 512, 1, 1), (512,), (512,), (512,), (512, 16, 1, 1), (512,), (32, 16, 3, 3), (32,), (512, 512, 1, 1), (512,), (512,), (512,), (512, 16, 1, 1), (512,), (32, 16, 3, 3), (32,), (512, 512, 1, 1), (512,), (512,), (512,), (512, 16, 1, 1), (512,), (32, 16, 3, 3), (32,), (512, 512, 1, 1), (512,), (512,), (512,), (16, 512, 10)), parameters=4765440
)
Total param num # 18.178711 Mb

init learning rate 0.0001000000 at iter 0

[cap_102_v1]	epoch/iter [0/600][0/391] ||	Loss: 0.5885, Top1_err: 89.8438, Top5_err: 45.3125 ||	Data/batch time: 0.1258/10.2983
[cap_102_v1]	epoch/iter [0/600][100/391] ||	Loss: 0.4885, Top1_err: 76.1835, Top5_err: 27.2896 ||	Data/batch time: 0.0019/1.2368
[cap_102_v1]	epoch/iter [0/600][200/391] ||	Loss: 0.4573, Top1_err: 69.9160, Top5_err: 20.8877 ||	Data/batch time: 0.0012/1.2049
[cap_102_v1]	epoch/iter [0/600][300/391] ||	Loss: 0.4380, Top1_err: 66.1986, Top5_err: 17.8390 ||	Data/batch time: 0.0010/1.1919
[cap_102_v1]	epoch/iter [0/600][390/391] ||	Loss: 0.4246, Top1_err: 63.5540, Top5_err: 15.9960 ||	Data/batch time: 0.0009/1.1953
Summary	epoch/iter [0/600] ||	TRAIN, Top1_err: 63.5540, Top5_err: 15.9960 ||	TEST, Top1_err: 100.0000, Top5_err: 100.0000 ||

model saved at result/cap_102_v1/epoch_1.pth
[cap_102_v1]	epoch/iter [1/600][0/391] ||	Loss: 0.3719, Top1_err: 55.4688, Top5_err: 4.6875 ||	Data/batch time: 0.1908/2.5993
[cap_102_v1]	epoch/iter [1/600][100/391] ||	Loss: 0.3705, Top1_err: 54.0300, Top5_err: 8.6324 ||	Data/batch time: 0.0024/1.1964
[cap_102_v1]	epoch/iter [1/600][200/391] ||	Loss: 0.3642, Top1_err: 52.7013, Top5_err: 8.3411 ||	Data/batch time: 0.0015/1.1729
[cap_102_v1]	epoch/iter [1/600][300/391] ||	Loss: 0.3580, Top1_err: 51.5054, Top5_err: 7.8826 ||	Data/batch time: 0.0012/1.1581
[cap_102_v1]	epoch/iter [1/600][390/391] ||	Loss: 0.3533, Top1_err: 50.6460, Top5_err: 7.6520 ||	Data/batch time: 0.0010/1.1518
Summary	epoch/iter [1/600] ||	TRAIN, Top1_err: 50.6460, Top5_err: 7.6520 ||	TEST, Top1_err: 100.0000, Top5_err: 100.0000 ||

[cap_102_v1]	epoch/iter [2/600][0/391] ||	Loss: 0.3306, Top1_err: 49.2188, Top5_err: 7.8125 ||	Data/batch time: 0.2104/1.4411
[cap_102_v1]	epoch/iter [2/600][100/391] ||	Loss: 0.3285, Top1_err: 46.4496, Top5_err: 5.8864 ||	Data/batch time: 0.0026/1.1609
[cap_102_v1]	epoch/iter [2/600][200/391] ||	Loss: 0.3276, Top1_err: 46.4863, Top5_err: 6.0595 ||	Data/batch time: 0.0016/1.1574
[cap_102_v1]	epoch/iter [2/600][300/391] ||	Loss: 0.3249, Top1_err: 46.1612, Top5_err: 5.9074 ||	Data/batch time: 0.0012/1.1540
[cap_102_v1]	epoch/iter [2/600][390/391] ||	Loss: 0.3223, Top1_err: 45.6660, Top5_err: 5.8800 ||	Data/batch time: 0.0010/1.1462
Summary	epoch/iter [2/600] ||	TRAIN, Top1_err: 45.6660, Top5_err: 5.8800 ||	TEST, Top1_err: 100.0000, Top5_err: 100.0000 ||

[cap_102_v1]	epoch/iter [3/600][0/391] ||	Loss: 0.3064, Top1_err: 43.7500, Top5_err: 2.3438 ||	Data/batch time: 0.2216/1.4437
[cap_102_v1]	epoch/iter [3/600][100/391] ||	Loss: 0.3039, Top1_err: 42.1101, Top5_err: 4.9660 ||	Data/batch time: 0.0027/1.1436
[cap_102_v1]	epoch/iter [3/600][200/391] ||	Loss: 0.3021, Top1_err: 42.0048, Top5_err: 4.9052 ||	Data/batch time: 0.0016/1.1542
[cap_102_v1]	epoch/iter [3/600][300/391] ||	Loss: 0.2993, Top1_err: 41.5542, Top5_err: 4.8562 ||	Data/batch time: 0.0013/1.1555
[cap_102_v1]	epoch/iter [3/600][390/391] ||	Loss: 0.2976, Top1_err: 41.3780, Top5_err: 4.8420 ||	Data/batch time: 0.0011/1.1515
Summary	epoch/iter [3/600] ||	TRAIN, Top1_err: 41.3780, Top5_err: 4.8420 ||	TEST, Top1_err: 100.0000, Top5_err: 100.0000 ||

[cap_102_v1]	epoch/iter [4/600][0/391] ||	Loss: 0.2547, Top1_err: 32.8125, Top5_err: 3.9062 ||	Data/batch time: 0.2037/1.4315
[cap_102_v1]	epoch/iter [4/600][100/391] ||	Loss: 0.2807, Top1_err: 38.5210, Top5_err: 4.3472 ||	Data/batch time: 0.0025/1.1271
[cap_102_v1]	epoch/iter [4/600][200/391] ||	Loss: 0.2802, Top1_err: 38.5961, Top5_err: 4.2250 ||	Data/batch time: 0.0015/1.1440
[cap_102_v1]	epoch/iter [4/600][300/391] ||	Loss: 0.2787, Top1_err: 38.2034, Top5_err: 4.1684 ||	Data/batch time: 0.0012/1.1417
[cap_102_v1]	epoch/iter [4/600][390/391] ||	Loss: 0.2770, Top1_err: 37.9280, Top5_err: 4.1240 ||	Data/batch time: 0.0010/1.1317
Summary	epoch/iter [4/600] ||	TRAIN, Top1_err: 37.9280, Top5_err: 4.1240 ||	TEST, Top1_err: 100.0000, Top5_err: 100.0000 ||

[cap_102_v1]	epoch/iter [5/600][0/391] ||	Loss: 0.2513, Top1_err: 34.3750, Top5_err: 3.1250 ||	Data/batch time: 0.2300/1.2524
[cap_102_v1]	epoch/iter [5/600][100/391] ||	Loss: 0.2594, Top1_err: 35.2723, Top5_err: 3.1559 ||	Data/batch time: 0.0028/1.1060
[cap_102_v1]	epoch/iter [5/600][200/391] ||	Loss: 0.2596, Top1_err: 35.1951, Top5_err: 3.3427 ||	Data/batch time: 0.0017/1.1025
[cap_102_v1]	epoch/iter [5/600][300/391] ||	Loss: 0.2586, Top1_err: 34.9356, Top5_err: 3.2937 ||	Data/batch time: 0.0013/1.1058
[cap_102_v1]	epoch/iter [5/600][390/391] ||	Loss: 0.2574, Top1_err: 35.0160, Top5_err: 3.2400 ||	Data/batch time: 0.0011/1.1198
Summary	epoch/iter [5/600] ||	TRAIN, Top1_err: 35.0160, Top5_err: 3.2400 ||	TEST, Top1_err: 100.0000, Top5_err: 100.0000 ||

[cap_102_v1]	epoch/iter [6/600][0/391] ||	Loss: 0.2725, Top1_err: 36.7188, Top5_err: 2.3438 ||	Data/batch time: 0.1849/1.3440
[cap_102_v1]	epoch/iter [6/600][100/391] ||	Loss: 0.2464, Top1_err: 33.3694, Top5_err: 3.0399 ||	Data/batch time: 0.0024/1.1434
[cap_102_v1]	epoch/iter [6/600][200/391] ||	Loss: 0.2436, Top1_err: 32.7231, Top5_err: 2.9734 ||	Data/batch time: 0.0014/1.1443
[cap_102_v1]	epoch/iter [6/600][300/391] ||	Loss: 0.2415, Top1_err: 32.3245, Top5_err: 2.8784 ||	Data/batch time: 0.0011/1.1475
[cap_102_v1]	epoch/iter [6/600][390/391] ||	Loss: 0.2399, Top1_err: 32.0200, Top5_err: 2.8140 ||	Data/batch time: 0.0010/1.1459
Summary	epoch/iter [6/600] ||	TRAIN, Top1_err: 32.0200, Top5_err: 2.8140 ||	TEST, Top1_err: 100.0000, Top5_err: 100.0000 ||

[cap_102_v1]	epoch/iter [7/600][0/391] ||	Loss: 0.2238, Top1_err: 25.7812, Top5_err: 3.1250 ||	Data/batch time: 0.1921/1.2123
[cap_102_v1]	epoch/iter [7/600][100/391] ||	Loss: 0.2220, Top1_err: 29.2002, Top5_err: 2.3515 ||	Data/batch time: 0.0024/1.1601
[cap_102_v1]	epoch/iter [7/600][200/391] ||	Loss: 0.2258, Top1_err: 29.9984, Top5_err: 2.4448 ||	Data/batch time: 0.0015/1.1615
[cap_102_v1]	epoch/iter [7/600][300/391] ||	Loss: 0.2255, Top1_err: 29.9341, Top5_err: 2.4554 ||	Data/batch time: 0.0012/1.1689
[cap_102_v1]	epoch/iter [7/600][390/391] ||	Loss: 0.2253, Top1_err: 29.9780, Top5_err: 2.4860 ||	Data/batch time: 0.0010/1.1738
Summary	epoch/iter [7/600] ||	TRAIN, Top1_err: 29.9780, Top5_err: 2.4860 ||	TEST, Top1_err: 100.0000, Top5_err: 100.0000 ||

[cap_102_v1]	epoch/iter [8/600][0/391] ||	Loss: 0.2307, Top1_err: 32.8125, Top5_err: 1.5625 ||	Data/batch time: 0.2184/1.4180
[cap_102_v1]	epoch/iter [8/600][100/391] ||	Loss: 0.2149, Top1_err: 28.0244, Top5_err: 2.1736 ||	Data/batch time: 0.0027/1.1954
[cap_102_v1]	epoch/iter [8/600][200/391] ||	Loss: 0.2123, Top1_err: 27.5187, Top5_err: 2.0794 ||	Data/batch time: 0.0016/1.1916
[cap_102_v1]	epoch/iter [8/600][300/391] ||	Loss: 0.2121, Top1_err: 27.6578, Top5_err: 2.1257 ||	Data/batch time: 0.0013/1.1879
[cap_102_v1]	epoch/iter [8/600][390/391] ||	Loss: 0.2113, Top1_err: 27.6300, Top5_err: 2.1340 ||	Data/batch time: 0.0011/1.1851
Summary	epoch/iter [8/600] ||	TRAIN, Top1_err: 27.6300, Top5_err: 2.1340 ||	TEST, Top1_err: 100.0000, Top5_err: 100.0000 ||

[cap_102_v1]	epoch/iter [9/600][0/391] ||	Loss: 0.2135, Top1_err: 26.5625, Top5_err: 3.1250 ||	Data/batch time: 0.2185/1.3525
[cap_102_v1]	epoch/iter [9/600][100/391] ||	Loss: 0.2006, Top1_err: 26.0288, Top5_err: 1.9647 ||	Data/batch time: 0.0027/1.1850
[cap_102_v1]	epoch/iter [9/600][200/391] ||	Loss: 0.2004, Top1_err: 26.0533, Top5_err: 1.8929 ||	Data/batch time: 0.0016/1.1913
[cap_102_v1]	epoch/iter [9/600][300/391] ||	Loss: 0.1997, Top1_err: 25.9707, Top5_err: 1.9155 ||	Data/batch time: 0.0013/1.1882
[cap_102_v1]	epoch/iter [9/600][390/391] ||	Loss: 0.1997, Top1_err: 25.8760, Top5_err: 1.8960 ||	Data/batch time: 0.0011/1.1882
Summary	epoch/iter [9/600] ||	TRAIN, Top1_err: 25.8760, Top5_err: 1.8960 ||	TEST, Top1_err: 100.0000, Top5_err: 100.0000 ||

[cap_102_v1]	epoch/iter [10/600][0/391] ||	Loss: 0.2160, Top1_err: 28.9062, Top5_err: 3.9062 ||	Data/batch time: 0.1842/1.4117
[cap_102_v1]	epoch/iter [10/600][100/391] ||	Loss: 0.1891, Top1_err: 24.2420, Top5_err: 1.5238 ||	Data/batch time: 0.0023/1.1952
[cap_102_v1]	epoch/iter [10/600][200/391] ||	Loss: 0.1885, Top1_err: 24.1255, Top5_err: 1.6519 ||	Data/batch time: 0.0014/1.1944
[cap_102_v1]	epoch/iter [10/600][300/391] ||	Loss: 0.1894, Top1_err: 24.2447, Top5_err: 1.6611 ||	Data/batch time: 0.0011/1.1935
[cap_102_v1]	epoch/iter [10/600][390/391] ||	Loss: 0.1893, Top1_err: 24.3360, Top5_err: 1.6300 ||	Data/batch time: 0.0010/1.1929
Summary	epoch/iter [10/600] ||	TRAIN, Top1_err: 24.3360, Top5_err: 1.6300 ||	TEST, Top1_err: 100.0000, Top5_err: 100.0000 ||

[cap_102_v1]	epoch/iter [11/600][0/391] ||	Loss: 0.1637, Top1_err: 21.0938, Top5_err: 1.5625 ||	Data/batch time: 0.2058/1.4091
[cap_102_v1]	epoch/iter [11/600][100/391] ||	Loss: 0.1801, Top1_err: 23.0275, Top5_err: 1.3614 ||	Data/batch time: 0.0026/1.1902
[cap_102_v1]	epoch/iter [11/600][200/391] ||	Loss: 0.1787, Top1_err: 22.7729, Top5_err: 1.3993 ||	Data/batch time: 0.0016/1.1933
[cap_102_v1]	epoch/iter [11/600][300/391] ||	Loss: 0.1799, Top1_err: 22.9625, Top5_err: 1.4691 ||	Data/batch time: 0.0012/1.1892
[cap_102_v1]	epoch/iter [11/600][390/391] ||	Loss: 0.2083, Top1_err: 26.0900, Top5_err: 3.6400 ||	Data/batch time: 0.0011/1.1902
Summary	epoch/iter [11/600] ||	TRAIN, Top1_err: 26.0900, Top5_err: 3.6400 ||	TEST, Top1_err: 100.0000, Top5_err: 100.0000 ||

[cap_102_v1]	epoch/iter [12/600][0/391] ||	Loss: 0.8100, Top1_err: 93.7500, Top5_err: 50.7812 ||	Data/batch time: 0.2264/1.4351
[cap_102_v1]	epoch/iter [12/600][100/391] ||	Loss: 0.8100, Top1_err: 89.9675, Top5_err: 50.1702 ||	Data/batch time: 0.0028/1.1853
[cap_102_v1]	epoch/iter [12/600][200/391] ||	Loss: 0.8100, Top1_err: 89.8826, Top5_err: 49.7046 ||	Data/batch time: 0.0017/1.1883
[cap_102_v1]	epoch/iter [12/600][300/391] ||	Loss: 0.8100, Top1_err: 89.9009, Top5_err: 50.0260 ||	Data/batch time: 0.0013/1.1884
[cap_102_v1]	epoch/iter [12/600][390/391] ||	Loss: 0.8100, Top1_err: 90.0000, Top5_err: 49.9860 ||	Data/batch time: 0.0011/1.1897
Summary	epoch/iter [12/600] ||	TRAIN, Top1_err: 90.0000, Top5_err: 49.9860 ||	TEST, Top1_err: 100.0000, Top5_err: 100.0000 ||

[cap_102_v1]	epoch/iter [13/600][0/391] ||	Loss: 0.8099, Top1_err: 88.2812, Top5_err: 51.5625 ||	Data/batch time: 0.2323/1.3755
[cap_102_v1]	epoch/iter [13/600][100/391] ||	Loss: 0.8099, Top1_err: 90.1841, Top5_err: 50.0077 ||	Data/batch time: 0.0028/1.1811
[cap_102_v1]	epoch/iter [13/600][200/391] ||	Loss: 0.8099, Top1_err: 90.0342, Top5_err: 50.0816 ||	Data/batch time: 0.0017/1.1772
[cap_102_v1]	epoch/iter [13/600][300/391] ||	Loss: 0.8099, Top1_err: 90.1137, Top5_err: 50.1246 ||	Data/batch time: 0.0013/1.1783
[cap_102_v1]	epoch/iter [13/600][390/391] ||	Loss: 0.8099, Top1_err: 90.0000, Top5_err: 50.0000 ||	Data/batch time: 0.0011/1.1746
Summary	epoch/iter [13/600] ||	TRAIN, Top1_err: 90.0000, Top5_err: 50.0000 ||	TEST, Top1_err: 100.0000, Top5_err: 100.0000 ||

[cap_102_v1]	epoch/iter [14/600][0/391] ||	Loss: 0.8099, Top1_err: 90.6250, Top5_err: 50.0000 ||	Data/batch time: 0.2310/1.4242
[cap_102_v1]	epoch/iter [14/600][100/391] ||	Loss: 0.8098, Top1_err: 89.5730, Top5_err: 49.0563 ||	Data/batch time: 0.0028/1.1864
[cap_102_v1]	epoch/iter [14/600][200/391] ||	Loss: 0.8098, Top1_err: 89.9604, Top5_err: 49.7357 ||	Data/batch time: 0.0017/1.1756
[cap_102_v1]	epoch/iter [14/600][300/391] ||	Loss: 0.8096, Top1_err: 89.9164, Top5_err: 49.8858 ||	Data/batch time: 0.0013/1.1765
[cap_102_v1]	epoch/iter [14/600][390/391] ||	Loss: 0.8045, Top1_err: 90.0000, Top5_err: 50.0100 ||	Data/batch time: 0.0011/1.1751
Summary	epoch/iter [14/600] ||	TRAIN, Top1_err: 90.0000, Top5_err: 50.0100 ||	TEST, Top1_err: 100.0000, Top5_err: 100.0000 ||

[cap_102_v1]	epoch/iter [15/600][0/391] ||	Loss: 0.7071, Top1_err: 91.4062, Top5_err: 50.7812 ||	Data/batch time: 0.2155/1.4188
[cap_102_v1]	epoch/iter [15/600][100/391] ||	Loss: 0.5561, Top1_err: 90.1067, Top5_err: 50.4564 ||	Data/batch time: 0.0027/1.1698
[cap_102_v1]	epoch/iter [15/600][200/391] ||	Loss: 0.5401, Top1_err: 90.0342, Top5_err: 50.5597 ||	Data/batch time: 0.0016/1.1682
[cap_102_v1]	epoch/iter [15/600][300/391] ||	Loss: 0.5347, Top1_err: 90.0358, Top5_err: 50.7216 ||	Data/batch time: 0.0013/1.1753
[cap_102_v1]	epoch/iter [15/600][390/391] ||	Loss: 0.5322, Top1_err: 90.0240, Top5_err: 50.6080 ||	Data/batch time: 0.0011/1.1762
Summary	epoch/iter [15/600] ||	TRAIN, Top1_err: 90.0240, Top5_err: 50.6080 ||	TEST, Top1_err: 100.0000, Top5_err: 100.0000 ||

[cap_102_v1]	epoch/iter [16/600][0/391] ||	Loss: 0.5233, Top1_err: 90.6250, Top5_err: 42.1875 ||	Data/batch time: 0.1913/1.3974
