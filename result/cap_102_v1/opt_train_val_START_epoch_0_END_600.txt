Experiment: cap_102_v1
------------ Train and Test Options -----------------
base_save_folder: result
batch_size_test: 128
batch_size_train: 128
beta1: 0.9
cap_N: 4
cap_model: v2
connect_detail: all
dataset: cifar10
debug_mode: False
device_id: 0,1
draw_hist: False
experiment_name: cap_102_v1
fc_manner: default
file_name: result/cap_102_v1/opt_train_val_START_epoch_0_END_600.txt
gamma: 0.1
layerwise: False
less_data_aug: True
loss_form: margin
lr: 0.0001
manner: 1
manual_seed: -1
max_epoch: 600
measure_time: False
momentum: 0.9
more_skip: False
multi_crop_test: False
no_visdom: False
non_target_j: False
num_workers: 2
optim: adam
phase: train_val
port_id: 8000
random_seed: 3483
s35: False
save_epoch: 25
save_folder: result/cap_102_v1
schedule: [200, 300, 400]
show_freq: 100
show_test_after_epoch: 100
use_cuda: True
weight_decay: 0.0005
wider: False
------------------ End --------------------
DataParallel (
  (module): CapNet (
    (module0): Sequential (
      (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True)
      (2): ReLU (inplace)
    )
    (module1): CapConv2 (
      (main_conv): CapConv (
        (conv_adjust_blob_shape): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (block): Sequential (
          (0): capConvRoute1 (
            (main_cap): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (main_cap_coeff): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (res_cap): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (res_squash): conv_squash(num_shared=32)
          )
        )
        (last_bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
        (last_relu): ReLU ()
        (last_squash): conv_squash(num_shared=32)
      )
      (sub_conv): CapConv (
        (block): Sequential (
          (0): capConvRoute1 (
            (main_cap): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), groups=32)
            (main_cap_coeff): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (res_cap): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
            (res_squash): conv_squash(num_shared=32)
          )
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
          (2): ReLU (inplace)
          (3): conv_squash(num_shared=32)
          (4): capConvRoute1 (
            (main_cap): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), groups=32)
            (main_cap_coeff): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (res_cap): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
            (res_squash): conv_squash(num_shared=32)
          )
          (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
          (6): ReLU (inplace)
          (7): conv_squash(num_shared=32)
          (8): capConvRoute1 (
            (main_cap): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), groups=32)
            (main_cap_coeff): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (res_cap): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
            (res_squash): conv_squash(num_shared=32)
          )
          (9): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
          (10): ReLU (inplace)
          (11): conv_squash(num_shared=32)
          (12): capConvRoute1 (
            (main_cap): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), groups=32)
            (main_cap_coeff): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (res_cap): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
            (res_squash): conv_squash(num_shared=32)
          )
        )
        (last_bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
        (last_relu): ReLU ()
        (last_squash): conv_squash(num_shared=32)
      )
    )
    (module2): CapConv2 (
      (main_conv): CapConv (
        (conv_adjust_blob_shape): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        (block): Sequential (
          (0): capConvRoute1 (
            (main_cap): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32)
            (main_cap_coeff): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (res_cap): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (res_squash): conv_squash(num_shared=32)
          )
        )
        (last_bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
        (last_relu): ReLU ()
        (last_squash): conv_squash(num_shared=32)
      )
      (sub_conv): CapConv (
        (block): Sequential (
          (0): capConvRoute1 (
            (main_cap): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), groups=32)
            (main_cap_coeff): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (res_cap): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
            (res_squash): conv_squash(num_shared=32)
          )
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
          (2): ReLU (inplace)
          (3): conv_squash(num_shared=32)
          (4): capConvRoute1 (
            (main_cap): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), groups=32)
            (main_cap_coeff): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (res_cap): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
            (res_squash): conv_squash(num_shared=32)
          )
          (5): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
          (6): ReLU (inplace)
          (7): conv_squash(num_shared=32)
          (8): capConvRoute1 (
            (main_cap): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), groups=32)
            (main_cap_coeff): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (res_cap): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
            (res_squash): conv_squash(num_shared=32)
          )
          (9): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
          (10): ReLU (inplace)
          (11): conv_squash(num_shared=32)
          (12): capConvRoute1 (
            (main_cap): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), groups=32)
            (main_cap_coeff): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (res_cap): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
            (res_squash): conv_squash(num_shared=32)
          )
        )
        (last_bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
        (last_relu): ReLU ()
        (last_squash): conv_squash(num_shared=32)
      )
    )
    (module3): CapConv2 (
      (main_conv): CapConv (
        (conv_adjust_blob_shape): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        (block): Sequential (
          (0): capConvRoute1 (
            (main_cap): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32)
            (main_cap_coeff): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (res_cap): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (res_squash): conv_squash(num_shared=32)
          )
        )
        (last_bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
        (last_relu): ReLU ()
        (last_squash): conv_squash(num_shared=32)
      )
      (sub_conv): CapConv (
        (block): Sequential (
          (0): capConvRoute1 (
            (main_cap): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), groups=32)
            (main_cap_coeff): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (res_cap): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
            (res_squash): conv_squash(num_shared=32)
          )
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
          (2): ReLU (inplace)
          (3): conv_squash(num_shared=32)
          (4): capConvRoute1 (
            (main_cap): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), groups=32)
            (main_cap_coeff): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (res_cap): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
            (res_squash): conv_squash(num_shared=32)
          )
          (5): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
          (6): ReLU (inplace)
          (7): conv_squash(num_shared=32)
          (8): capConvRoute1 (
            (main_cap): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), groups=32)
            (main_cap_coeff): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (res_cap): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
            (res_squash): conv_squash(num_shared=32)
          )
          (9): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
          (10): ReLU (inplace)
          (11): conv_squash(num_shared=32)
          (12): capConvRoute1 (
            (main_cap): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), groups=32)
            (main_cap_coeff): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (res_cap): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
            (res_squash): conv_squash(num_shared=32)
          )
        )
        (last_bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
        (last_relu): ReLU ()
        (last_squash): conv_squash(num_shared=32)
      )
    )
    (module4): CapConv2 (
      (main_conv): CapConv (
        (conv_adjust_blob_shape): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        (block): Sequential (
          (0): capConvRoute1 (
            (main_cap): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32)
            (main_cap_coeff): Conv2d(512, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (res_cap): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (res_squash): conv_squash(num_shared=32)
          )
        )
        (last_bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
        (last_relu): ReLU ()
        (last_squash): conv_squash(num_shared=32)
      )
      (sub_conv): CapConv (
        (block): Sequential (
          (0): capConvRoute1 (
            (main_cap): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), groups=32)
            (main_cap_coeff): Conv2d(512, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (res_cap): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
            (res_squash): conv_squash(num_shared=32)
          )
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
          (2): ReLU (inplace)
          (3): conv_squash(num_shared=32)
          (4): capConvRoute1 (
            (main_cap): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), groups=32)
            (main_cap_coeff): Conv2d(512, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (res_cap): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
            (res_squash): conv_squash(num_shared=32)
          )
          (5): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
          (6): ReLU (inplace)
          (7): conv_squash(num_shared=32)
          (8): capConvRoute1 (
            (main_cap): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), groups=32)
            (main_cap_coeff): Conv2d(512, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (res_cap): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
            (res_squash): conv_squash(num_shared=32)
          )
          (9): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
          (10): ReLU (inplace)
          (11): conv_squash(num_shared=32)
          (12): capConvRoute1 (
            (main_cap): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), groups=32)
            (main_cap_coeff): Conv2d(512, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (res_cap): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
            (res_squash): conv_squash(num_shared=32)
          )
        )
        (last_bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
        (last_relu): ReLU ()
        (last_squash): conv_squash(num_shared=32)
      )
    )
    (final_cls): CapFC(in_cap_num=512, out_cap_num=10, cap_dim=16, fc_manner=default)
  ), weights=((32, 3, 3, 3), (32,), (32,), (32,), (64, 32, 3, 3), (64,), (64, 1, 3, 3), (64,), (32, 2, 3, 3), (32,), (64, 32, 3, 3), (64,), (64,), (64,), (64, 2, 1, 1), (64,), (32, 2, 3, 3), (32,), (64, 64, 1, 1), (64,), (64,), (64,), (64, 2, 1, 1), (64,), (32, 2, 3, 3), (32,), (64, 64, 1, 1), (64,), (64,), (64,), (64, 2, 1, 1), (64,), (32, 2, 3, 3), (32,), (64, 64, 1, 1), (64,), (64,), (64,), (64, 2, 1, 1), (64,), (32, 2, 3, 3), (32,), (64, 64, 1, 1), (64,), (64,), (64,), (128, 64, 3, 3), (128,), (128, 2, 3, 3), (128,), (32, 4, 3, 3), (32,), (128, 64, 3, 3), (128,), (128,), (128,), (128, 4, 1, 1), (128,), (32, 4, 3, 3), (32,), (128, 128, 1, 1), (128,), (128,), (128,), (128, 4, 1, 1), (128,), (32, 4, 3, 3), (32,), (128, 128, 1, 1), (128,), (128,), (128,), (128, 4, 1, 1), (128,), (32, 4, 3, 3), (32,), (128, 128, 1, 1), (128,), (128,), (128,), (128, 4, 1, 1), (128,), (32, 4, 3, 3), (32,), (128, 128, 1, 1), (128,), (128,), (128,), (256, 128, 3, 3), (256,), (256, 4, 3, 3), (256,), (32, 8, 3, 3), (32,), (256, 128, 3, 3), (256,), (256,), (256,), (256, 8, 1, 1), (256,), (32, 8, 3, 3), (32,), (256, 256, 1, 1), (256,), (256,), (256,), (256, 8, 1, 1), (256,), (32, 8, 3, 3), (32,), (256, 256, 1, 1), (256,), (256,), (256,), (256, 8, 1, 1), (256,), (32, 8, 3, 3), (32,), (256, 256, 1, 1), (256,), (256,), (256,), (256, 8, 1, 1), (256,), (32, 8, 3, 3), (32,), (256, 256, 1, 1), (256,), (256,), (256,), (512, 256, 3, 3), (512,), (512, 8, 3, 3), (512,), (32, 16, 3, 3), (32,), (512, 256, 3, 3), (512,), (512,), (512,), (512, 16, 1, 1), (512,), (32, 16, 3, 3), (32,), (512, 512, 1, 1), (512,), (512,), (512,), (512, 16, 1, 1), (512,), (32, 16, 3, 3), (32,), (512, 512, 1, 1), (512,), (512,), (512,), (512, 16, 1, 1), (512,), (32, 16, 3, 3), (32,), (512, 512, 1, 1), (512,), (512,), (512,), (512, 16, 1, 1), (512,), (32, 16, 3, 3), (32,), (512, 512, 1, 1), (512,), (512,), (512,), (16, 512, 10)), parameters=4765440
)
Total param num # 18.178711 Mb

init learning rate 0.0001000000 at iter 0

[cap_102_v1]	epoch/iter [0/600][0/391] ||	Loss: 0.5885, Top1_err: 89.8438, Top5_err: 45.3125 ||	Data/batch time: 0.1258/10.2983
[cap_102_v1]	epoch/iter [0/600][100/391] ||	Loss: 0.4885, Top1_err: 76.1835, Top5_err: 27.2896 ||	Data/batch time: 0.0019/1.2368
[cap_102_v1]	epoch/iter [0/600][200/391] ||	Loss: 0.4573, Top1_err: 69.9160, Top5_err: 20.8877 ||	Data/batch time: 0.0012/1.2049
[cap_102_v1]	epoch/iter [0/600][300/391] ||	Loss: 0.4380, Top1_err: 66.1986, Top5_err: 17.8390 ||	Data/batch time: 0.0010/1.1919
[cap_102_v1]	epoch/iter [0/600][390/391] ||	Loss: 0.4246, Top1_err: 63.5540, Top5_err: 15.9960 ||	Data/batch time: 0.0009/1.1953
Summary	epoch/iter [0/600] ||	TRAIN, Top1_err: 63.5540, Top5_err: 15.9960 ||	TEST, Top1_err: 100.0000, Top5_err: 100.0000 ||

model saved at result/cap_102_v1/epoch_1.pth
[cap_102_v1]	epoch/iter [1/600][0/391] ||	Loss: 0.3719, Top1_err: 55.4688, Top5_err: 4.6875 ||	Data/batch time: 0.1908/2.5993
[cap_102_v1]	epoch/iter [1/600][100/391] ||	Loss: 0.3705, Top1_err: 54.0300, Top5_err: 8.6324 ||	Data/batch time: 0.0024/1.1964
[cap_102_v1]	epoch/iter [1/600][200/391] ||	Loss: 0.3642, Top1_err: 52.7013, Top5_err: 8.3411 ||	Data/batch time: 0.0015/1.1729
[cap_102_v1]	epoch/iter [1/600][300/391] ||	Loss: 0.3580, Top1_err: 51.5054, Top5_err: 7.8826 ||	Data/batch time: 0.0012/1.1581
[cap_102_v1]	epoch/iter [1/600][390/391] ||	Loss: 0.3533, Top1_err: 50.6460, Top5_err: 7.6520 ||	Data/batch time: 0.0010/1.1518
Summary	epoch/iter [1/600] ||	TRAIN, Top1_err: 50.6460, Top5_err: 7.6520 ||	TEST, Top1_err: 100.0000, Top5_err: 100.0000 ||

[cap_102_v1]	epoch/iter [2/600][0/391] ||	Loss: 0.3306, Top1_err: 49.2188, Top5_err: 7.8125 ||	Data/batch time: 0.2104/1.4411
[cap_102_v1]	epoch/iter [2/600][100/391] ||	Loss: 0.3285, Top1_err: 46.4496, Top5_err: 5.8864 ||	Data/batch time: 0.0026/1.1609
[cap_102_v1]	epoch/iter [2/600][200/391] ||	Loss: 0.3276, Top1_err: 46.4863, Top5_err: 6.0595 ||	Data/batch time: 0.0016/1.1574
[cap_102_v1]	epoch/iter [2/600][300/391] ||	Loss: 0.3249, Top1_err: 46.1612, Top5_err: 5.9074 ||	Data/batch time: 0.0012/1.1540
[cap_102_v1]	epoch/iter [2/600][390/391] ||	Loss: 0.3223, Top1_err: 45.6660, Top5_err: 5.8800 ||	Data/batch time: 0.0010/1.1462
Summary	epoch/iter [2/600] ||	TRAIN, Top1_err: 45.6660, Top5_err: 5.8800 ||	TEST, Top1_err: 100.0000, Top5_err: 100.0000 ||

[cap_102_v1]	epoch/iter [3/600][0/391] ||	Loss: 0.3064, Top1_err: 43.7500, Top5_err: 2.3438 ||	Data/batch time: 0.2216/1.4437
[cap_102_v1]	epoch/iter [3/600][100/391] ||	Loss: 0.3039, Top1_err: 42.1101, Top5_err: 4.9660 ||	Data/batch time: 0.0027/1.1436
[cap_102_v1]	epoch/iter [3/600][200/391] ||	Loss: 0.3021, Top1_err: 42.0048, Top5_err: 4.9052 ||	Data/batch time: 0.0016/1.1542
[cap_102_v1]	epoch/iter [3/600][300/391] ||	Loss: 0.2993, Top1_err: 41.5542, Top5_err: 4.8562 ||	Data/batch time: 0.0013/1.1555
