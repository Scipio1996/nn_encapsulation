Experiment: cap_102_v2
------------ Train and Test Options -----------------
base_save_folder: result
batch_size_test: 128
batch_size_train: 128
beta1: 0.9
cap_N: 4
cap_model: v2
connect_detail: all
dataset: cifar10
debug_mode: True
device_id: 2
draw_hist: False
experiment_name: cap_102_v2
fc_manner: default
file_name: result/cap_102_v2/opt_train_val_START_epoch_0_END_600.txt
gamma: 0.1
layerwise: False
less_data_aug: True
loss_form: margin
lr: 0.0001
manner: 1
manual_seed: -1
max_epoch: 600
measure_time: False
momentum: 0.9
more_skip: False
multi_crop_test: False
no_visdom: False
non_target_j: False
num_workers: 2
optim: adam
phase: train_val
port_id: 8000
random_seed: 4069
s35: False
save_epoch: 1
save_folder: result/cap_102_v2
schedule: [200, 300, 400]
show_freq: 1
show_test_after_epoch: 0
use_cuda: True
weight_decay: 0.0005
wider: False
------------------ End --------------------
CapNet (
  (module0): Sequential (
    (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)), weights=((32, 3, 3, 3), (32,)), parameters=896
    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True), weights=((32,), (32,)), parameters=64
    (2): ReLU (inplace), weights=(), parameters=0
  ), weights=((32, 3, 3, 3), (32,), (32,), (32,)), parameters=960
  (module1): CapConv2 (
    (main_conv): CapConv (
      (conv_adjust_blob_shape): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (block): Sequential (
        (0): capConvRoute1 (
          (main_cap): Sequential (
            (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
            (2): ReLU ()
            (3): conv_squash(num_shared=32)
          )
          (main_cap_coeff): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
          (res_cap): Sequential (
            (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
            (2): ReLU ()
            (3): conv_squash(num_shared=32)
          )
        )
      )
      (last_squash): conv_squash(num_shared=32)
    )
    (sub_conv): CapConv (
      (block): Sequential (
        (0): capConvRoute1 (
          (main_cap): Sequential (
            (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), groups=32)
            (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
            (2): ReLU ()
            (3): conv_squash(num_shared=32)
          )
          (main_cap_coeff): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
          (res_cap): Sequential (
            (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
            (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
            (2): ReLU ()
            (3): conv_squash(num_shared=32)
          )
        )
        (1): conv_squash(num_shared=32)
        (2): capConvRoute1 (
          (main_cap): Sequential (
            (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), groups=32)
            (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
            (2): ReLU ()
            (3): conv_squash(num_shared=32)
          )
          (main_cap_coeff): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
          (res_cap): Sequential (
            (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
            (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
            (2): ReLU ()
            (3): conv_squash(num_shared=32)
          )
        )
        (3): conv_squash(num_shared=32)
        (4): capConvRoute1 (
          (main_cap): Sequential (
            (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), groups=32)
            (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
            (2): ReLU ()
            (3): conv_squash(num_shared=32)
          )
          (main_cap_coeff): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
          (res_cap): Sequential (
            (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
            (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
            (2): ReLU ()
            (3): conv_squash(num_shared=32)
          )
        )
        (5): conv_squash(num_shared=32)
        (6): capConvRoute1 (
          (main_cap): Sequential (
            (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), groups=32)
            (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
            (2): ReLU ()
            (3): conv_squash(num_shared=32)
          )
          (main_cap_coeff): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
          (res_cap): Sequential (
            (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
            (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
            (2): ReLU ()
            (3): conv_squash(num_shared=32)
          )
        )
      )
      (last_squash): conv_squash(num_shared=32)
    )
  ), weights=((64, 32, 3, 3), (64,), (64, 1, 3, 3), (64,), (64,), (64,), (32, 2, 3, 3), (32,), (64, 32, 3, 3), (64,), (64,), (64,), (64, 2, 1, 1), (64,), (64,), (64,), (32, 2, 3, 3), (32,), (64, 64, 1, 1), (64,), (64,), (64,), (64, 2, 1, 1), (64,), (64,), (64,), (32, 2, 3, 3), (32,), (64, 64, 1, 1), (64,), (64,), (64,), (64, 2, 1, 1), (64,), (64,), (64,), (32, 2, 3, 3), (32,), (64, 64, 1, 1), (64,), (64,), (64,), (64, 2, 1, 1), (64,), (64,), (64,), (32, 2, 3, 3), (32,), (64, 64, 1, 1), (64,), (64,), (64,)), parameters=59360
  (module2): CapConv2 (
    (main_conv): CapConv (
      (conv_adjust_blob_shape): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (block): Sequential (
        (0): capConvRoute1 (
          (main_cap): Sequential (
            (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
            (2): ReLU ()
            (3): conv_squash(num_shared=32)
          )
          (main_cap_coeff): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
          (res_cap): Sequential (
            (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
            (2): ReLU ()
            (3): conv_squash(num_shared=32)
          )
        )
      )
      (last_squash): conv_squash(num_shared=32)
    )
    (sub_conv): CapConv (
      (block): Sequential (
        (0): capConvRoute1 (
          (main_cap): Sequential (
            (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), groups=32)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
            (2): ReLU ()
            (3): conv_squash(num_shared=32)
          )
          (main_cap_coeff): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
          (res_cap): Sequential (
            (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
            (2): ReLU ()
            (3): conv_squash(num_shared=32)
          )
        )
        (1): conv_squash(num_shared=32)
        (2): capConvRoute1 (
          (main_cap): Sequential (
            (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), groups=32)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
            (2): ReLU ()
            (3): conv_squash(num_shared=32)
          )
          (main_cap_coeff): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
          (res_cap): Sequential (
            (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
            (2): ReLU ()
            (3): conv_squash(num_shared=32)
          )
        )
        (3): conv_squash(num_shared=32)
        (4): capConvRoute1 (
          (main_cap): Sequential (
            (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), groups=32)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
            (2): ReLU ()
            (3): conv_squash(num_shared=32)
          )
          (main_cap_coeff): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
          (res_cap): Sequential (
            (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
            (2): ReLU ()
            (3): conv_squash(num_shared=32)
          )
        )
        (5): conv_squash(num_shared=32)
        (6): capConvRoute1 (
          (main_cap): Sequential (
            (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), groups=32)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
            (2): ReLU ()
            (3): conv_squash(num_shared=32)
          )
          (main_cap_coeff): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
          (res_cap): Sequential (
            (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
            (2): ReLU ()
            (3): conv_squash(num_shared=32)
          )
        )
      )
      (last_squash): conv_squash(num_shared=32)
    )
  ), weights=((128, 64, 3, 3), (128,), (128, 2, 3, 3), (128,), (128,), (128,), (32, 4, 3, 3), (32,), (128, 64, 3, 3), (128,), (128,), (128,), (128, 4, 1, 1), (128,), (128,), (128,), (32, 4, 3, 3), (32,), (128, 128, 1, 1), (128,), (128,), (128,), (128, 4, 1, 1), (128,), (128,), (128,), (32, 4, 3, 3), (32,), (128, 128, 1, 1), (128,), (128,), (128,), (128, 4, 1, 1), (128,), (128,), (128,), (32, 4, 3, 3), (32,), (128, 128, 1, 1), (128,), (128,), (128,), (128, 4, 1, 1), (128,), (128,), (128,), (32, 4, 3, 3), (32,), (128, 128, 1, 1), (128,), (128,), (128,)), parameters=227232
  (module3): CapConv2 (
    (main_conv): CapConv (
      (conv_adjust_blob_shape): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (block): Sequential (
        (0): capConvRoute1 (
          (main_cap): Sequential (
            (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
            (2): ReLU ()
            (3): conv_squash(num_shared=32)
          )
          (main_cap_coeff): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
          (res_cap): Sequential (
            (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
            (2): ReLU ()
            (3): conv_squash(num_shared=32)
          )
        )
      )
      (last_squash): conv_squash(num_shared=32)
    )
    (sub_conv): CapConv (
      (block): Sequential (
        (0): capConvRoute1 (
          (main_cap): Sequential (
            (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), groups=32)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
            (2): ReLU ()
            (3): conv_squash(num_shared=32)
          )
          (main_cap_coeff): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
          (res_cap): Sequential (
            (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
            (2): ReLU ()
            (3): conv_squash(num_shared=32)
          )
        )
        (1): conv_squash(num_shared=32)
        (2): capConvRoute1 (
          (main_cap): Sequential (
            (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), groups=32)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
            (2): ReLU ()
            (3): conv_squash(num_shared=32)
          )
          (main_cap_coeff): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
          (res_cap): Sequential (
            (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
            (2): ReLU ()
            (3): conv_squash(num_shared=32)
          )
        )
        (3): conv_squash(num_shared=32)
        (4): capConvRoute1 (
          (main_cap): Sequential (
            (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), groups=32)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
            (2): ReLU ()
            (3): conv_squash(num_shared=32)
          )
          (main_cap_coeff): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
          (res_cap): Sequential (
            (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
            (2): ReLU ()
            (3): conv_squash(num_shared=32)
          )
        )
        (5): conv_squash(num_shared=32)
        (6): capConvRoute1 (
          (main_cap): Sequential (
            (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), groups=32)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
            (2): ReLU ()
            (3): conv_squash(num_shared=32)
          )
          (main_cap_coeff): Conv2d(256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
          (res_cap): Sequential (
            (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
            (2): ReLU ()
            (3): conv_squash(num_shared=32)
          )
        )
      )
      (last_squash): conv_squash(num_shared=32)
    )
  ), weights=((256, 128, 3, 3), (256,), (256, 4, 3, 3), (256,), (256,), (256,), (32, 8, 3, 3), (32,), (256, 128, 3, 3), (256,), (256,), (256,), (256, 8, 1, 1), (256,), (256,), (256,), (32, 8, 3, 3), (32,), (256, 256, 1, 1), (256,), (256,), (256,), (256, 8, 1, 1), (256,), (256,), (256,), (32, 8, 3, 3), (32,), (256, 256, 1, 1), (256,), (256,), (256,), (256, 8, 1, 1), (256,), (256,), (256,), (32, 8, 3, 3), (32,), (256, 256, 1, 1), (256,), (256,), (256,), (256, 8, 1, 1), (256,), (256,), (256,), (32, 8, 3, 3), (32,), (256, 256, 1, 1), (256,), (256,), (256,)), parameters=888992
  (module4): CapConv2 (
    (main_conv): CapConv (
      (conv_adjust_blob_shape): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (block): Sequential (
        (0): capConvRoute1 (
          (main_cap): Sequential (
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
            (2): ReLU ()
            (3): conv_squash(num_shared=32)
          )
          (main_cap_coeff): Conv2d(512, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
          (res_cap): Sequential (
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
            (2): ReLU ()
            (3): conv_squash(num_shared=32)
          )
        )
      )
      (last_squash): conv_squash(num_shared=32)
    )
    (sub_conv): CapConv (
      (block): Sequential (
        (0): capConvRoute1 (
          (main_cap): Sequential (
            (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), groups=32)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
            (2): ReLU ()
            (3): conv_squash(num_shared=32)
          )
          (main_cap_coeff): Conv2d(512, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
          (res_cap): Sequential (
            (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
            (2): ReLU ()
            (3): conv_squash(num_shared=32)
          )
        )
        (1): conv_squash(num_shared=32)
        (2): capConvRoute1 (
          (main_cap): Sequential (
            (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), groups=32)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
            (2): ReLU ()
            (3): conv_squash(num_shared=32)
          )
          (main_cap_coeff): Conv2d(512, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
          (res_cap): Sequential (
            (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
            (2): ReLU ()
            (3): conv_squash(num_shared=32)
          )
        )
        (3): conv_squash(num_shared=32)
        (4): capConvRoute1 (
          (main_cap): Sequential (
            (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), groups=32)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
            (2): ReLU ()
            (3): conv_squash(num_shared=32)
          )
          (main_cap_coeff): Conv2d(512, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
          (res_cap): Sequential (
            (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
            (2): ReLU ()
            (3): conv_squash(num_shared=32)
          )
        )
        (5): conv_squash(num_shared=32)
        (6): capConvRoute1 (
          (main_cap): Sequential (
            (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), groups=32)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
            (2): ReLU ()
            (3): conv_squash(num_shared=32)
          )
          (main_cap_coeff): Conv2d(512, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
          (res_cap): Sequential (
            (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
            (2): ReLU ()
            (3): conv_squash(num_shared=32)
          )
        )
      )
      (last_squash): conv_squash(num_shared=32)
    )
  ), weights=((512, 256, 3, 3), (512,), (512, 8, 3, 3), (512,), (512,), (512,), (32, 16, 3, 3), (32,), (512, 256, 3, 3), (512,), (512,), (512,), (512, 16, 1, 1), (512,), (512,), (512,), (32, 16, 3, 3), (32,), (512, 512, 1, 1), (512,), (512,), (512,), (512, 16, 1, 1), (512,), (512,), (512,), (32, 16, 3, 3), (32,), (512, 512, 1, 1), (512,), (512,), (512,), (512, 16, 1, 1), (512,), (512,), (512,), (32, 16, 3, 3), (32,), (512, 512, 1, 1), (512,), (512,), (512,), (512, 16, 1, 1), (512,), (512,), (512,), (32, 16, 3, 3), (32,), (512, 512, 1, 1), (512,), (512,), (512,)), parameters=3516576
  (final_cls): CapFC(in_cap_num=512, out_cap_num=10, cap_dim=16, fc_manner=default), weights=((16, 512, 10),), parameters=81920
)
Total param num # 18.215332 Mb

init learning rate 0.0001000000 at iter 0

[cap_102_v2]	epoch/iter [0/600][0/391] ||	Loss: 0.6565, Top1_err: 92.1875, Top5_err: 48.4375 ||	Data/batch time: 0.1183/4.6076
[cap_102_v2]	epoch/iter [0/600][1/391] ||	Loss: nan, Top1_err: 96.0938, Top5_err: 74.2188 ||	Data/batch time: 0.0669/3.1092
[cap_102_v2]	epoch/iter [0/600][2/391] ||	Loss: nan, Top1_err: 97.3958, Top5_err: 82.8125 ||	Data/batch time: 0.0464/2.5025
[cap_102_v2]	epoch/iter [0/600][3/391] ||	Loss: nan, Top1_err: 98.0469, Top5_err: 87.1094 ||	Data/batch time: 0.0368/2.1982
[cap_102_v2]	epoch/iter [0/600][4/391] ||	Loss: nan, Top1_err: 98.4375, Top5_err: 89.6875 ||	Data/batch time: 0.0307/2.0165
