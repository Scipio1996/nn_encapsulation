Experiment: base_102_v2_3
------------ Train and Test Options -----------------
base_save_folder: result
batch_size_test: 128
batch_size_train: 128
beta1: 0.9
cap_N: 4
cap_model: v2
connect_detail: all
dataset: cifar10
debug_mode: False
device_id: 0
draw_hist: False
experiment_name: base_102_v2_3
fc_manner: default
file_name: result/base_102_v2_3/opt_train_val_START_epoch_0_END_600.txt
gamma: 0.1
layerwise: False
less_data_aug: True
loss_form: margin
lr: 0.0001
manual_seed: -1
max_epoch: 600
measure_time: False
momentum: 0.9
more_skip: True
multi_crop_test: False
no_visdom: False
non_target_j: False
num_workers: 2
optim: adam
phase: train_val
port_id: 9000
random_seed: 894
s35: True
save_epoch: 25
save_folder: result/base_102_v2_3
schedule: [200, 300, 400]
show_freq: 100
show_test_after_epoch: 100
use_cuda: True
weight_decay: 0.0005
wider: True
------------------ End --------------------
DataParallel (
  (module): CapNet(
    (module0): Sequential(
      (0): Conv2d (3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True)
      (2): ReLU(inplace)
    )
    (module1): CapConv2(
      (main_conv): CapConv(
        (conv_adjust_blob_shape): Conv2d (32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (block): Sequential(
          (0): multi_conv(
            (multi1): Conv2d (32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32)
            (multi2): Conv2d (32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (multi3): Conv2d (32, 64, kernel_size=(1, 1), stride=(1, 1), groups=32)
          )
        )
        (last_bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
        (last_relu): ReLU()
        (last_squash): conv_squash(num_shared=32)
      )
      (sub_conv): CapConv(
        (block): Sequential(
          (0): Conv2d (64, 64, kernel_size=(1, 1), stride=(1, 1), groups=32)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
          (2): ReLU(inplace)
          (3): conv_squash(num_shared=32)
          (4): Conv2d (64, 64, kernel_size=(1, 1), stride=(1, 1), groups=32)
          (5): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
          (6): ReLU(inplace)
          (7): conv_squash(num_shared=32)
          (8): Conv2d (64, 64, kernel_size=(1, 1), stride=(1, 1), groups=32)
        )
        (last_bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
        (last_relu): ReLU()
        (last_squash): conv_squash(num_shared=32)
      )
      (ms_conv_adjust_blob_shape): Conv2d (32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (ms_conv): Conv2d (64, 64, kernel_size=(1, 1), stride=(1, 1), groups=32)
      (ms_bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
      (ms_relu): ReLU()
      (ms_squash): conv_squash(num_shared=32)
    )
    (module2): CapConv2(
      (main_conv): CapConv(
        (conv_adjust_blob_shape): Conv2d (64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        (block): Sequential(
          (0): multi_conv(
            (multi1): Conv2d (64, 128, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=32)
            (multi2): Conv2d (64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32)
            (multi3): Conv2d (64, 128, kernel_size=(1, 1), stride=(2, 2), groups=32)
          )
        )
        (last_bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
        (last_relu): ReLU()
        (last_squash): conv_squash(num_shared=32)
      )
      (sub_conv): CapConv(
        (block): Sequential(
          (0): Conv2d (128, 128, kernel_size=(1, 1), stride=(1, 1), groups=32)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
          (2): ReLU(inplace)
          (3): conv_squash(num_shared=32)
          (4): Conv2d (128, 128, kernel_size=(1, 1), stride=(1, 1), groups=32)
          (5): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
          (6): ReLU(inplace)
          (7): conv_squash(num_shared=32)
          (8): Conv2d (128, 128, kernel_size=(1, 1), stride=(1, 1), groups=32)
        )
        (last_bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
        (last_relu): ReLU()
        (last_squash): conv_squash(num_shared=32)
      )
      (ms_conv_adjust_blob_shape): Conv2d (64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (ms_conv): Conv2d (128, 128, kernel_size=(1, 1), stride=(1, 1), groups=32)
      (ms_bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
      (ms_relu): ReLU()
      (ms_squash): conv_squash(num_shared=32)
    )
    (module3): CapConv2(
      (main_conv): CapConv(
        (conv_adjust_blob_shape): Conv2d (128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        (block): Sequential(
          (0): multi_conv(
            (multi1): Conv2d (128, 256, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=32)
            (multi2): Conv2d (128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32)
            (multi3): Conv2d (128, 256, kernel_size=(1, 1), stride=(2, 2), groups=32)
          )
        )
        (last_bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
        (last_relu): ReLU()
        (last_squash): conv_squash(num_shared=32)
      )
      (sub_conv): CapConv(
        (block): Sequential(
          (0): Conv2d (256, 256, kernel_size=(1, 1), stride=(1, 1), groups=32)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
          (2): ReLU(inplace)
          (3): conv_squash(num_shared=32)
          (4): Conv2d (256, 256, kernel_size=(1, 1), stride=(1, 1), groups=32)
          (5): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
          (6): ReLU(inplace)
          (7): conv_squash(num_shared=32)
          (8): Conv2d (256, 256, kernel_size=(1, 1), stride=(1, 1), groups=32)
        )
        (last_bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
        (last_relu): ReLU()
        (last_squash): conv_squash(num_shared=32)
      )
      (ms_conv_adjust_blob_shape): Conv2d (128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (ms_conv): Conv2d (256, 256, kernel_size=(1, 1), stride=(1, 1), groups=32)
      (ms_bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
      (ms_relu): ReLU()
      (ms_squash): conv_squash(num_shared=32)
    )
    (module4): CapConv2(
      (main_conv): CapConv(
        (conv_adjust_blob_shape): Conv2d (256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        (block): Sequential(
          (0): multi_conv(
            (multi1): Conv2d (256, 512, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=32)
            (multi2): Conv2d (256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32)
            (multi3): Conv2d (256, 512, kernel_size=(1, 1), stride=(2, 2), groups=32)
          )
        )
        (last_bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
        (last_relu): ReLU()
        (last_squash): conv_squash(num_shared=32)
      )
      (sub_conv): CapConv(
        (block): Sequential(
          (0): Conv2d (512, 512, kernel_size=(1, 1), stride=(1, 1), groups=32)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
          (2): ReLU(inplace)
          (3): conv_squash(num_shared=32)
          (4): Conv2d (512, 512, kernel_size=(1, 1), stride=(1, 1), groups=32)
          (5): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
          (6): ReLU(inplace)
          (7): conv_squash(num_shared=32)
          (8): Conv2d (512, 512, kernel_size=(1, 1), stride=(1, 1), groups=32)
        )
        (last_bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
        (last_relu): ReLU()
        (last_squash): conv_squash(num_shared=32)
      )
      (ms_conv_adjust_blob_shape): Conv2d (256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (ms_conv): Conv2d (512, 512, kernel_size=(1, 1), stride=(1, 1), groups=32)
      (ms_bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
      (ms_relu): ReLU()
      (ms_squash): conv_squash(num_shared=32)
    )
    (final_cls): CapFC(in_cap_num=512, out_cap_num=10, cap_dim=16, fc_manner=default)
  ), weights=((32, 3, 3, 3), (32,), (32,), (32,), (64, 32, 3, 3), (64,), (64, 1, 5, 5), (64,), (64, 1, 3, 3), (64,), (64, 1, 1, 1), (64,), (64,), (64,), (64, 2, 1, 1), (64,), (64,), (64,), (64, 2, 1, 1), (64,), (64,), (64,), (64, 2, 1, 1), (64,), (64,), (64,), (64, 32, 3, 3), (64,), (64, 2, 1, 1), (64,), (64,), (64,), (128, 64, 3, 3), (128,), (128, 2, 5, 5), (128,), (128, 2, 3, 3), (128,), (128, 2, 1, 1), (128,), (128,), (128,), (128, 4, 1, 1), (128,), (128,), (128,), (128, 4, 1, 1), (128,), (128,), (128,), (128, 4, 1, 1), (128,), (128,), (128,), (128, 64, 3, 3), (128,), (128, 4, 1, 1), (128,), (128,), (128,), (256, 128, 3, 3), (256,), (256, 4, 5, 5), (256,), (256, 4, 3, 3), (256,), (256, 4, 1, 1), (256,), (256,), (256,), (256, 8, 1, 1), (256,), (256,), (256,), (256, 8, 1, 1), (256,), (256,), (256,), (256, 8, 1, 1), (256,), (256,), (256,), (256, 128, 3, 3), (256,), (256, 8, 1, 1), (256,), (256,), (256,), (512, 256, 3, 3), (512,), (512, 8, 5, 5), (512,), (512, 8, 3, 3), (512,), (512, 8, 1, 1), (512,), (512,), (512,), (512, 16, 1, 1), (512,), (512,), (512,), (512, 16, 1, 1), (512,), (512,), (512,), (512, 16, 1, 1), (512,), (512,), (512,), (512, 256, 3, 3), (512,), (512, 16, 1, 1), (512,), (512,), (512,), (16, 512, 10)), parameters=3468480
)
Total param num # 13.231201 Mb

init learning rate 0.0001000000 at iter 0

[base_102_v2_3]	epoch/iter [0/600][0/391] ||	Loss: 0.5451, Top1_err: 85.1562, Top5_err: 45.3125 ||	Data/batch time: 0.0575/3.0919
[base_102_v2_3]	epoch/iter [0/600][100/391] ||	Loss: 0.4383, Top1_err: 65.9653, Top5_err: 17.6129 ||	Data/batch time: 0.1331/0.4100
[base_102_v2_3]	epoch/iter [0/600][200/391] ||	Loss: 0.4129, Top1_err: 61.0735, Top5_err: 14.2802 ||	Data/batch time: 0.0670/0.3296
