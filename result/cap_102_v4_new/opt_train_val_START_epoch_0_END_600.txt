Experiment: cap_102_v4_new
------------ Train and Test Options -----------------
base_save_folder: result
batch_size_test: 128
batch_size_train: 128
beta1: 0.9
cap_N: 4
cap_model: v2
coeff_dimwise: False
connect_detail: all
dataset: cifar10
debug_mode: False
device_id: 
draw_hist: False
experiment_name: cap_102_v4_new
fc_manner: default
file_name: result/cap_102_v4_new/opt_train_val_START_epoch_0_END_600.txt
gamma: 0.1
layerwise: False
less_data_aug: True
loss_fac: 100.0
loss_form: margin
lr: 0.0001
manner: 0
manual_seed: -1
max_epoch: 600
measure_time: False
momentum: 0.9
more_skip: False
multi_crop_test: False
net_config: default_super
no_visdom: False
non_target_j: False
num_workers: 2
optim: adam
ot_loss: False
ot_loss_fac: 1.0
phase: train_val
port_id: 9000
random_seed: 4111
s35: True
save_epoch: 25
save_folder: result/cap_102_v4_new
schedule: [300, 400, 450]
show_freq: 100
show_test_after_epoch: 100
use_cuda: True
weight_decay: 0.0005
wider: False
------------------ End --------------------
DataParallel (
  (module): CapNet(
    (module0): Sequential(
      (0): Conv2d (3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True)
      (2): ReLU(inplace)
    )
    (module1): CapConv2(
      (main_conv): CapConv(
        (conv_adjust_blob_shape): Conv2d (32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (block): Sequential(
          (0): capConvRoute3(
            (main_cap): Sequential(
              (0): Conv2d (32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
              (2): ReLU()
              (3): conv_squash(num_shared=32)
            )
            (main_cap_coeff): Conv2d (64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (res_cap): Sequential(
              (0): Conv2d (32, 64, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
              (2): ReLU()
              (3): conv_squash(num_shared=32)
            )
            (res_cap_coeff): Conv2d (64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
          )
        )
        (last_squash): conv_squash(num_shared=32)
      )
      (sub_conv): CapConv(
        (block): Sequential(
          (0): capConvRoute3(
            (main_cap): Sequential(
              (0): Conv2d (64, 64, kernel_size=(1, 1), stride=(1, 1), groups=32)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
              (2): ReLU()
              (3): conv_squash(num_shared=32)
            )
            (main_cap_coeff): Conv2d (64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (res_cap): Sequential(
              (0): Conv2d (64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
              (2): ReLU()
              (3): conv_squash(num_shared=32)
            )
            (res_cap_coeff): Conv2d (64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
          )
          (1): conv_squash(num_shared=32)
          (2): capConvRoute3(
            (main_cap): Sequential(
              (0): Conv2d (64, 64, kernel_size=(1, 1), stride=(1, 1), groups=32)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
              (2): ReLU()
              (3): conv_squash(num_shared=32)
            )
            (main_cap_coeff): Conv2d (64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (res_cap): Sequential(
              (0): Conv2d (64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
              (2): ReLU()
              (3): conv_squash(num_shared=32)
            )
            (res_cap_coeff): Conv2d (64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
          )
          (3): conv_squash(num_shared=32)
          (4): capConvRoute3(
            (main_cap): Sequential(
              (0): Conv2d (64, 64, kernel_size=(1, 1), stride=(1, 1), groups=32)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
              (2): ReLU()
              (3): conv_squash(num_shared=32)
            )
            (main_cap_coeff): Conv2d (64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (res_cap): Sequential(
              (0): Conv2d (64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
              (2): ReLU()
              (3): conv_squash(num_shared=32)
            )
            (res_cap_coeff): Conv2d (64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
          )
        )
        (last_squash): conv_squash(num_shared=32)
      )
      (ms_conv_adjust_blob_shape): Conv2d (32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (ms_conv): capConvRoute3(
        (main_cap): Sequential(
          (0): Conv2d (64, 64, kernel_size=(1, 1), stride=(1, 1), groups=32)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
          (2): ReLU()
          (3): conv_squash(num_shared=32)
        )
        (main_cap_coeff): Conv2d (64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
        (res_cap): Sequential(
          (0): Conv2d (64, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
          (2): ReLU()
          (3): conv_squash(num_shared=32)
        )
        (res_cap_coeff): Conv2d (64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
      )
      (ms_bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
      (ms_relu): ReLU()
      (ms_squash): conv_squash(num_shared=32)
    )
    (module2): CapConv2(
      (main_conv): CapConv(
        (conv_adjust_blob_shape): Conv2d (64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        (block): Sequential(
          (0): capConvRoute3(
            (main_cap): Sequential(
              (0): Conv2d (64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
              (2): ReLU()
              (3): conv_squash(num_shared=32)
            )
            (main_cap_coeff): Conv2d (128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (res_cap): Sequential(
              (0): Conv2d (64, 128, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3))
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
              (2): ReLU()
              (3): conv_squash(num_shared=32)
            )
            (res_cap_coeff): Conv2d (128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
          )
        )
        (last_squash): conv_squash(num_shared=32)
      )
      (sub_conv): Sequential(
        (0): CapConv(
          (block): Sequential(
            (0): capConvRoute3(
              (main_cap): Sequential(
                (0): Conv2d (128, 128, kernel_size=(1, 1), stride=(1, 1), groups=32)
                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
                (2): ReLU()
                (3): conv_squash(num_shared=32)
              )
              (main_cap_coeff): Conv2d (128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
              (res_cap): Sequential(
                (0): Conv2d (128, 128, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
                (2): ReLU()
                (3): conv_squash(num_shared=32)
              )
              (res_cap_coeff): Conv2d (128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            )
          )
          (last_squash): conv_squash(num_shared=32)
        )
        (1): CapConv(
          (block): Sequential(
            (0): capConvRoute3(
              (main_cap): Sequential(
                (0): Conv2d (128, 128, kernel_size=(1, 1), stride=(1, 1), groups=32)
                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
                (2): ReLU()
                (3): conv_squash(num_shared=32)
              )
              (main_cap_coeff): Conv2d (128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
              (res_cap): Sequential(
                (0): Conv2d (128, 128, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
                (2): ReLU()
                (3): conv_squash(num_shared=32)
              )
              (res_cap_coeff): Conv2d (128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            )
          )
          (last_squash): conv_squash(num_shared=32)
        )
        (2): CapConv(
          (block): Sequential(
            (0): capConvRoute3(
              (main_cap): Sequential(
                (0): Conv2d (128, 128, kernel_size=(1, 1), stride=(1, 1), groups=32)
                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
                (2): ReLU()
                (3): conv_squash(num_shared=32)
              )
              (main_cap_coeff): Conv2d (128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
              (res_cap): Sequential(
                (0): Conv2d (128, 128, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
                (2): ReLU()
                (3): conv_squash(num_shared=32)
              )
              (res_cap_coeff): Conv2d (128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            )
          )
          (last_squash): conv_squash(num_shared=32)
        )
        (3): CapConv(
          (block): Sequential(
            (0): capConvRoute3(
              (main_cap): Sequential(
                (0): Conv2d (128, 128, kernel_size=(1, 1), stride=(1, 1), groups=32)
                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
                (2): ReLU()
                (3): conv_squash(num_shared=32)
              )
              (main_cap_coeff): Conv2d (128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
              (res_cap): Sequential(
                (0): Conv2d (128, 128, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
                (2): ReLU()
                (3): conv_squash(num_shared=32)
              )
              (res_cap_coeff): Conv2d (128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            )
          )
          (last_squash): conv_squash(num_shared=32)
        )
        (4): CapConv(
          (block): Sequential(
            (0): capConvRoute3(
              (main_cap): Sequential(
                (0): Conv2d (128, 128, kernel_size=(1, 1), stride=(1, 1), groups=32)
                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
                (2): ReLU()
                (3): conv_squash(num_shared=32)
              )
              (main_cap_coeff): Conv2d (128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
              (res_cap): Sequential(
                (0): Conv2d (128, 128, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
                (2): ReLU()
                (3): conv_squash(num_shared=32)
              )
              (res_cap_coeff): Conv2d (128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            )
          )
          (last_squash): conv_squash(num_shared=32)
        )
        (5): CapConv(
          (block): Sequential(
            (0): capConvRoute3(
              (main_cap): Sequential(
                (0): Conv2d (128, 128, kernel_size=(1, 1), stride=(1, 1), groups=32)
                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
                (2): ReLU()
                (3): conv_squash(num_shared=32)
              )
              (main_cap_coeff): Conv2d (128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
              (res_cap): Sequential(
                (0): Conv2d (128, 128, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
                (2): ReLU()
                (3): conv_squash(num_shared=32)
              )
              (res_cap_coeff): Conv2d (128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            )
          )
          (last_squash): conv_squash(num_shared=32)
        )
        (6): CapConv(
          (block): Sequential(
            (0): capConvRoute3(
              (main_cap): Sequential(
                (0): Conv2d (128, 128, kernel_size=(1, 1), stride=(1, 1), groups=32)
                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
                (2): ReLU()
                (3): conv_squash(num_shared=32)
              )
              (main_cap_coeff): Conv2d (128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
              (res_cap): Sequential(
                (0): Conv2d (128, 128, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
                (2): ReLU()
                (3): conv_squash(num_shared=32)
              )
              (res_cap_coeff): Conv2d (128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            )
          )
          (last_squash): conv_squash(num_shared=32)
        )
      )
      (ms_conv_adjust_blob_shape): Conv2d (64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (ms_conv): capConvRoute3(
        (main_cap): Sequential(
          (0): Conv2d (128, 128, kernel_size=(1, 1), stride=(1, 1), groups=32)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
          (2): ReLU()
          (3): conv_squash(num_shared=32)
        )
        (main_cap_coeff): Conv2d (128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
        (res_cap): Sequential(
          (0): Conv2d (128, 128, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
          (2): ReLU()
          (3): conv_squash(num_shared=32)
        )
        (res_cap_coeff): Conv2d (128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
      )
      (ms_bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
      (ms_relu): ReLU()
      (ms_squash): conv_squash(num_shared=32)
    )
    (module3): CapConv2(
      (main_conv): CapConv(
        (conv_adjust_blob_shape): Conv2d (128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        (block): Sequential(
          (0): capConvRoute3(
            (main_cap): Sequential(
              (0): Conv2d (128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
              (2): ReLU()
              (3): conv_squash(num_shared=32)
            )
            (main_cap_coeff): Conv2d (256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (res_cap): Sequential(
              (0): Conv2d (128, 256, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3))
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
              (2): ReLU()
              (3): conv_squash(num_shared=32)
            )
            (res_cap_coeff): Conv2d (256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
          )
        )
        (last_squash): conv_squash(num_shared=32)
      )
      (sub_conv): CapConv(
        (block): Sequential(
          (0): capConvRoute3(
            (main_cap): Sequential(
              (0): Conv2d (256, 256, kernel_size=(1, 1), stride=(1, 1), groups=32)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
              (2): ReLU()
              (3): conv_squash(num_shared=32)
            )
            (main_cap_coeff): Conv2d (256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (res_cap): Sequential(
              (0): Conv2d (256, 256, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
              (2): ReLU()
              (3): conv_squash(num_shared=32)
            )
            (res_cap_coeff): Conv2d (256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
          )
          (1): conv_squash(num_shared=32)
          (2): capConvRoute3(
            (main_cap): Sequential(
              (0): Conv2d (256, 256, kernel_size=(1, 1), stride=(1, 1), groups=32)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
              (2): ReLU()
              (3): conv_squash(num_shared=32)
            )
            (main_cap_coeff): Conv2d (256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (res_cap): Sequential(
              (0): Conv2d (256, 256, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
              (2): ReLU()
              (3): conv_squash(num_shared=32)
            )
            (res_cap_coeff): Conv2d (256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
          )
          (3): conv_squash(num_shared=32)
          (4): capConvRoute3(
            (main_cap): Sequential(
              (0): Conv2d (256, 256, kernel_size=(1, 1), stride=(1, 1), groups=32)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
              (2): ReLU()
              (3): conv_squash(num_shared=32)
            )
            (main_cap_coeff): Conv2d (256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (res_cap): Sequential(
              (0): Conv2d (256, 256, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
              (2): ReLU()
              (3): conv_squash(num_shared=32)
            )
            (res_cap_coeff): Conv2d (256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
          )
        )
        (last_squash): conv_squash(num_shared=32)
      )
      (ms_conv_adjust_blob_shape): Conv2d (128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (ms_conv): capConvRoute3(
        (main_cap): Sequential(
          (0): Conv2d (256, 256, kernel_size=(1, 1), stride=(1, 1), groups=32)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
          (2): ReLU()
          (3): conv_squash(num_shared=32)
        )
        (main_cap_coeff): Conv2d (256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
        (res_cap): Sequential(
          (0): Conv2d (256, 256, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
          (2): ReLU()
          (3): conv_squash(num_shared=32)
        )
        (res_cap_coeff): Conv2d (256, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
      )
      (ms_bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
      (ms_relu): ReLU()
      (ms_squash): conv_squash(num_shared=32)
    )
    (module4): CapConv2(
      (main_conv): CapConv(
        (conv_adjust_blob_shape): Conv2d (256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        (block): Sequential(
          (0): capConvRoute3(
            (main_cap): Sequential(
              (0): Conv2d (256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
              (2): ReLU()
              (3): conv_squash(num_shared=32)
            )
            (main_cap_coeff): Conv2d (512, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            (res_cap): Sequential(
              (0): Conv2d (256, 512, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3))
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
              (2): ReLU()
              (3): conv_squash(num_shared=32)
            )
            (res_cap_coeff): Conv2d (512, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
          )
        )
        (last_squash): conv_squash(num_shared=32)
      )
      (sub_conv): Sequential(
        (0): CapConv(
          (block): Sequential(
            (0): capConvRoute3(
              (main_cap): Sequential(
                (0): Conv2d (512, 512, kernel_size=(1, 1), stride=(1, 1), groups=32)
                (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
                (2): ReLU()
                (3): conv_squash(num_shared=32)
              )
              (main_cap_coeff): Conv2d (512, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
              (res_cap): Sequential(
                (0): Conv2d (512, 512, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
                (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
                (2): ReLU()
                (3): conv_squash(num_shared=32)
              )
              (res_cap_coeff): Conv2d (512, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            )
          )
          (last_squash): conv_squash(num_shared=32)
        )
        (1): CapConv(
          (block): Sequential(
            (0): capConvRoute3(
              (main_cap): Sequential(
                (0): Conv2d (512, 512, kernel_size=(1, 1), stride=(1, 1), groups=32)
                (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
                (2): ReLU()
                (3): conv_squash(num_shared=32)
              )
              (main_cap_coeff): Conv2d (512, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
              (res_cap): Sequential(
                (0): Conv2d (512, 512, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
                (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
                (2): ReLU()
                (3): conv_squash(num_shared=32)
              )
              (res_cap_coeff): Conv2d (512, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            )
          )
          (last_squash): conv_squash(num_shared=32)
        )
        (2): CapConv(
          (block): Sequential(
            (0): capConvRoute3(
              (main_cap): Sequential(
                (0): Conv2d (512, 512, kernel_size=(1, 1), stride=(1, 1), groups=32)
                (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
                (2): ReLU()
                (3): conv_squash(num_shared=32)
              )
              (main_cap_coeff): Conv2d (512, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
              (res_cap): Sequential(
                (0): Conv2d (512, 512, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
                (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
                (2): ReLU()
                (3): conv_squash(num_shared=32)
              )
              (res_cap_coeff): Conv2d (512, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            )
          )
          (last_squash): conv_squash(num_shared=32)
        )
        (3): CapConv(
          (block): Sequential(
            (0): capConvRoute3(
              (main_cap): Sequential(
                (0): Conv2d (512, 512, kernel_size=(1, 1), stride=(1, 1), groups=32)
                (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
                (2): ReLU()
                (3): conv_squash(num_shared=32)
              )
              (main_cap_coeff): Conv2d (512, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
              (res_cap): Sequential(
                (0): Conv2d (512, 512, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
                (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
                (2): ReLU()
                (3): conv_squash(num_shared=32)
              )
              (res_cap_coeff): Conv2d (512, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            )
          )
          (last_squash): conv_squash(num_shared=32)
        )
        (4): CapConv(
          (block): Sequential(
            (0): capConvRoute3(
              (main_cap): Sequential(
                (0): Conv2d (512, 512, kernel_size=(1, 1), stride=(1, 1), groups=32)
                (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
                (2): ReLU()
                (3): conv_squash(num_shared=32)
              )
              (main_cap_coeff): Conv2d (512, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
              (res_cap): Sequential(
                (0): Conv2d (512, 512, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
                (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
                (2): ReLU()
                (3): conv_squash(num_shared=32)
              )
              (res_cap_coeff): Conv2d (512, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            )
          )
          (last_squash): conv_squash(num_shared=32)
        )
        (5): CapConv(
          (block): Sequential(
            (0): capConvRoute3(
              (main_cap): Sequential(
                (0): Conv2d (512, 512, kernel_size=(1, 1), stride=(1, 1), groups=32)
                (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
                (2): ReLU()
                (3): conv_squash(num_shared=32)
              )
              (main_cap_coeff): Conv2d (512, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
              (res_cap): Sequential(
                (0): Conv2d (512, 512, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
                (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
                (2): ReLU()
                (3): conv_squash(num_shared=32)
              )
              (res_cap_coeff): Conv2d (512, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            )
          )
          (last_squash): conv_squash(num_shared=32)
        )
        (6): CapConv(
          (block): Sequential(
            (0): capConvRoute3(
              (main_cap): Sequential(
                (0): Conv2d (512, 512, kernel_size=(1, 1), stride=(1, 1), groups=32)
                (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
                (2): ReLU()
                (3): conv_squash(num_shared=32)
              )
              (main_cap_coeff): Conv2d (512, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
              (res_cap): Sequential(
                (0): Conv2d (512, 512, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
                (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
                (2): ReLU()
                (3): conv_squash(num_shared=32)
              )
              (res_cap_coeff): Conv2d (512, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
            )
          )
          (last_squash): conv_squash(num_shared=32)
        )
      )
      (ms_conv_adjust_blob_shape): Conv2d (256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (ms_conv): capConvRoute3(
        (main_cap): Sequential(
          (0): Conv2d (512, 512, kernel_size=(1, 1), stride=(1, 1), groups=32)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
          (2): ReLU()
          (3): conv_squash(num_shared=32)
        )
        (main_cap_coeff): Conv2d (512, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
        (res_cap): Sequential(
          (0): Conv2d (512, 512, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
          (2): ReLU()
          (3): conv_squash(num_shared=32)
        )
        (res_cap_coeff): Conv2d (512, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
      )
      (ms_bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True)
      (ms_relu): ReLU()
      (ms_squash): conv_squash(num_shared=32)
    )
    (final_cls): CapFC(in_cap_num=512, out_cap_num=10, cap_dim=16, fc_manner=default)
  ), weights=((32, 3, 3, 3), (32,), (32,), (32,), (64, 32, 3, 3), (64,), (64, 1, 3, 3), (64,), (64,), (64,), (32, 2, 3, 3), (32,), (64, 32, 7, 7), (64,), (64,), (64,), (32, 2, 3, 3), (32,), (64, 2, 1, 1), (64,), (64,), (64,), (32, 2, 3, 3), (32,), (64, 64, 5, 5), (64,), (64,), (64,), (32, 2, 3, 3), (32,), (64, 2, 1, 1), (64,), (64,), (64,), (32, 2, 3, 3), (32,), (64, 64, 5, 5), (64,), (64,), (64,), (32, 2, 3, 3), (32,), (64, 2, 1, 1), (64,), (64,), (64,), (32, 2, 3, 3), (32,), (64, 64, 5, 5), (64,), (64,), (64,), (32, 2, 3, 3), (32,), (64, 32, 3, 3), (64,), (64, 2, 1, 1), (64,), (64,), (64,), (32, 2, 3, 3), (32,), (64, 64, 5, 5), (64,), (64,), (64,), (32, 2, 3, 3), (32,), (64,), (64,), (128, 64, 3, 3), (128,), (128, 2, 3, 3), (128,), (128,), (128,), (32, 4, 3, 3), (32,), (128, 64, 7, 7), (128,), (128,), (128,), (32, 4, 3, 3), (32,), (128, 4, 1, 1), (128,), (128,), (128,), (32, 4, 3, 3), (32,), (128, 128, 5, 5), (128,), (128,), (128,), (32, 4, 3, 3), (32,), (128, 4, 1, 1), (128,), (128,), (128,), (32, 4, 3, 3), (32,), (128, 128, 5, 5), (128,), (128,), (128,), (32, 4, 3, 3), (32,), (128, 4, 1, 1), (128,), (128,), (128,), (32, 4, 3, 3), (32,), (128, 128, 5, 5), (128,), (128,), (128,), (32, 4, 3, 3), (32,), (128, 4, 1, 1), (128,), (128,), (128,), (32, 4, 3, 3), (32,), (128, 128, 5, 5), (128,), (128,), (128,), (32, 4, 3, 3), (32,), (128, 4, 1, 1), (128,), (128,), (128,), (32, 4, 3, 3), (32,), (128, 128, 5, 5), (128,), (128,), (128,), (32, 4, 3, 3), (32,), (128, 4, 1, 1), (128,), (128,), (128,), (32, 4, 3, 3), (32,), (128, 128, 5, 5), (128,), (128,), (128,), (32, 4, 3, 3), (32,), (128, 4, 1, 1), (128,), (128,), (128,), (32, 4, 3, 3), (32,), (128, 128, 5, 5), (128,), (128,), (128,), (32, 4, 3, 3), (32,), (128, 64, 3, 3), (128,), (128, 4, 1, 1), (128,), (128,), (128,), (32, 4, 3, 3), (32,), (128, 128, 5, 5), (128,), (128,), (128,), (32, 4, 3, 3), (32,), (128,), (128,), (256, 128, 3, 3), (256,), (256, 4, 3, 3), (256,), (256,), (256,), (32, 8, 3, 3), (32,), (256, 128, 7, 7), (256,), (256,), (256,), (32, 8, 3, 3), (32,), (256, 8, 1, 1), (256,), (256,), (256,), (32, 8, 3, 3), (32,), (256, 256, 5, 5), (256,), (256,), (256,), (32, 8, 3, 3), (32,), (256, 8, 1, 1), (256,), (256,), (256,), (32, 8, 3, 3), (32,), (256, 256, 5, 5), (256,), (256,), (256,), (32, 8, 3, 3), (32,), (256, 8, 1, 1), (256,), (256,), (256,), (32, 8, 3, 3), (32,), (256, 256, 5, 5), (256,), (256,), (256,), (32, 8, 3, 3), (32,), (256, 128, 3, 3), (256,), (256, 8, 1, 1), (256,), (256,), (256,), (32, 8, 3, 3), (32,), (256, 256, 5, 5), (256,), (256,), (256,), (32, 8, 3, 3), (32,), (256,), (256,), (512, 256, 3, 3), (512,), (512, 8, 3, 3), (512,), (512,), (512,), (32, 16, 3, 3), (32,), (512, 256, 7, 7), (512,), (512,), (512,), (32, 16, 3, 3), (32,), (512, 16, 1, 1), (512,), (512,), (512,), (32, 16, 3, 3), (32,), (512, 512, 5, 5), (512,), (512,), (512,), (32, 16, 3, 3), (32,), (512, 16, 1, 1), (512,), (512,), (512,), (32, 16, 3, 3), (32,), (512, 512, 5, 5), (512,), (512,), (512,), (32, 16, 3, 3), (32,), (512, 16, 1, 1), (512,), (512,), (512,), (32, 16, 3, 3), (32,), (512, 512, 5, 5), (512,), (512,), (512,), (32, 16, 3, 3), (32,), (512, 16, 1, 1), (512,), (512,), (512,), (32, 16, 3, 3), (32,), (512, 512, 5, 5), (512,), (512,), (512,), (32, 16, 3, 3), (32,), (512, 16, 1, 1), (512,), (512,), (512,), (32, 16, 3, 3), (32,), (512, 512, 5, 5), (512,), (512,), (512,), (32, 16, 3, 3), (32,), (512, 16, 1, 1), (512,), (512,), (512,), (32, 16, 3, 3), (32,), (512, 512, 5, 5), (512,), (512,), (512,), (32, 16, 3, 3), (32,), (512, 16, 1, 1), (512,), (512,), (512,), (32, 16, 3, 3), (32,), (512, 512, 5, 5), (512,), (512,), (512,), (32, 16, 3, 3), (32,), (512, 256, 3, 3), (512,), (512, 16, 1, 1), (512,), (512,), (512,), (32, 16, 3, 3), (32,), (512, 512, 5, 5), (512,), (512,), (512,), (32, 16, 3, 3), (32,), (512,), (512,), (16, 512, 10)), parameters=74724608
)
Total param num # 285.051758 Mb

init learning rate 0.0001000000 at iter 0

[cap_102_v4_new]	epoch/iter [0/600][0/391] ||	Loss: 55.2066, Top1_err: 91.4062, Top5_err: 50.0000 ||	Data/batch time: 0.0537/4.6197
[cap_102_v4_new]	epoch/iter [0/600][100/391] ||	Loss: 47.5219, Top1_err: 74.8917, Top5_err: 24.8530 ||	Data/batch time: 0.0009/1.2936
