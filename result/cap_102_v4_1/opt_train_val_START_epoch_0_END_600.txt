Experiment: cap_102_v4_1
------------ Train and Test Options -----------------
C_form: l2
base_save_folder: result
batch_size_test: 128
batch_size_train: 128
beta1: 0.9
cap_N: 4
cap_model: v2
coeff_dimwise: False
connect_detail: all
dataset: cifar10
debug_mode: False
device_id: 4
draw_hist: False
encapsulate_G: False
experiment_name: cap_102_v4_1
fc_manner: default
file_name: result/cap_102_v4_1/opt_train_val_START_epoch_0_END_600.txt
gamma: 0.1
layerwise: True
less_data_aug: True
loss_fac: 1.0
loss_form: margin
lr: 0.0001
manner: 0
manual_seed: -1
max_epoch: 600
measure_time: False
momentum: 0.9
multi_crop_test: False
net_config: default
no_bp_P_L: False
no_visdom: False
non_target_j: False
num_workers: 2
optim: adam
ot_loss: False
ot_loss_fac: 1.0
phase: train_val
port_id: 9000
random_seed: 6055
remove_bias: False
s35: True
save_epoch: 25
save_folder: result/cap_102_v4_1
schedule: [200, 300, 400]
show_freq: 100
show_test_after_epoch: 100
skip_critic: False
skip_relu: False
use_capBN: True
use_cuda: True
weight_decay: 0.0005
wider: True
withCapRoute: False
------------------ End --------------------
DataParallel (
  (module): CapNet(
    (module0): Sequential(
      (0): Conv2d (3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True)
      (2): ReLU(inplace)
    )
    (module1): CapConv2(
      (main_conv): CapConv(
        (block): ModuleList(
          (0): basic_conv(
            (conv): ModuleList(
              (0): Conv2d (32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=32)
              (1): Conv2d (32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32)
              (2): Conv2d (32, 64, kernel_size=(1, 1), stride=(1, 1), groups=32)
            )
          )
          (1): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True)
          (2): ReLU(inplace)
          (3): conv_squash(num_shared=32)
        )
        (conv_adjust_blob_shape): Conv2d (32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (sub_conv): CapConv(
        (block): ModuleList(
          (0): basic_conv(
            (conv): ModuleList(
              (0): Conv2d (64, 64, kernel_size=(1, 1), stride=(1, 1), groups=32)
            )
          )
          (1): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True)
          (2): ReLU(inplace)
          (3): conv_squash(num_shared=32)
          (4): basic_conv(
            (conv): ModuleList(
              (0): Conv2d (64, 64, kernel_size=(1, 1), stride=(1, 1), groups=32)
            )
          )
          (5): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True)
          (6): ReLU(inplace)
          (7): conv_squash(num_shared=32)
          (8): basic_conv(
            (conv): ModuleList(
              (0): Conv2d (64, 64, kernel_size=(1, 1), stride=(1, 1), groups=32)
            )
          )
          (9): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True)
          (10): ReLU(inplace)
          (11): conv_squash(num_shared=32)
          (12): basic_conv(
            (conv): ModuleList(
              (0): Conv2d (64, 64, kernel_size=(1, 1), stride=(1, 1), groups=32)
            )
          )
          (13): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True)
          (14): ReLU(inplace)
          (15): conv_squash(num_shared=32)
        )
      )
    )
    (module2): CapConv2(
      (main_conv): CapConv(
        (block): ModuleList(
          (0): basic_conv(
            (conv): ModuleList(
              (0): Conv2d (64, 128, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=32)
              (1): Conv2d (64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32)
              (2): Conv2d (64, 128, kernel_size=(1, 1), stride=(2, 2), groups=32)
            )
          )
          (1): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True)
          (2): ReLU(inplace)
          (3): conv_squash(num_shared=32)
        )
        (conv_adjust_blob_shape): Conv2d (64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      )
      (sub_conv): CapConv(
        (block): ModuleList(
          (0): basic_conv(
            (conv): ModuleList(
              (0): Conv2d (128, 128, kernel_size=(1, 1), stride=(1, 1), groups=32)
            )
          )
          (1): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True)
          (2): ReLU(inplace)
          (3): conv_squash(num_shared=32)
          (4): basic_conv(
            (conv): ModuleList(
              (0): Conv2d (128, 128, kernel_size=(1, 1), stride=(1, 1), groups=32)
            )
          )
          (5): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True)
          (6): ReLU(inplace)
          (7): conv_squash(num_shared=32)
          (8): basic_conv(
            (conv): ModuleList(
              (0): Conv2d (128, 128, kernel_size=(1, 1), stride=(1, 1), groups=32)
            )
          )
          (9): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True)
          (10): ReLU(inplace)
          (11): conv_squash(num_shared=32)
          (12): basic_conv(
            (conv): ModuleList(
              (0): Conv2d (128, 128, kernel_size=(1, 1), stride=(1, 1), groups=32)
            )
          )
          (13): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True)
          (14): ReLU(inplace)
          (15): conv_squash(num_shared=32)
        )
      )
    )
    (module3): CapConv2(
      (main_conv): CapConv(
        (block): ModuleList(
          (0): basic_conv(
            (conv): ModuleList(
              (0): Conv2d (128, 256, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=32)
              (1): Conv2d (128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32)
              (2): Conv2d (128, 256, kernel_size=(1, 1), stride=(2, 2), groups=32)
            )
          )
          (1): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True)
          (2): ReLU(inplace)
          (3): conv_squash(num_shared=32)
        )
        (conv_adjust_blob_shape): Conv2d (128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      )
      (sub_conv): CapConv(
        (block): ModuleList(
          (0): basic_conv(
            (conv): ModuleList(
              (0): Conv2d (256, 256, kernel_size=(1, 1), stride=(1, 1), groups=32)
            )
          )
          (1): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True)
          (2): ReLU(inplace)
          (3): conv_squash(num_shared=32)
          (4): basic_conv(
            (conv): ModuleList(
              (0): Conv2d (256, 256, kernel_size=(1, 1), stride=(1, 1), groups=32)
            )
          )
          (5): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True)
          (6): ReLU(inplace)
          (7): conv_squash(num_shared=32)
          (8): basic_conv(
            (conv): ModuleList(
              (0): Conv2d (256, 256, kernel_size=(1, 1), stride=(1, 1), groups=32)
            )
          )
          (9): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True)
          (10): ReLU(inplace)
          (11): conv_squash(num_shared=32)
          (12): basic_conv(
            (conv): ModuleList(
              (0): Conv2d (256, 256, kernel_size=(1, 1), stride=(1, 1), groups=32)
            )
          )
          (13): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True)
          (14): ReLU(inplace)
          (15): conv_squash(num_shared=32)
        )
      )
    )
    (module4): CapConv2(
      (main_conv): CapConv(
        (block): ModuleList(
          (0): basic_conv(
            (conv): ModuleList(
              (0): Conv2d (256, 512, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=32)
              (1): Conv2d (256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32)
              (2): Conv2d (256, 512, kernel_size=(1, 1), stride=(2, 2), groups=32)
            )
          )
          (1): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True)
          (2): ReLU(inplace)
          (3): conv_squash(num_shared=32)
        )
        (conv_adjust_blob_shape): Conv2d (256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      )
      (sub_conv): CapConv(
        (block): ModuleList(
          (0): basic_conv(
            (conv): ModuleList(
              (0): Conv2d (512, 512, kernel_size=(1, 1), stride=(1, 1), groups=32)
            )
          )
          (1): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True)
          (2): ReLU(inplace)
          (3): conv_squash(num_shared=32)
          (4): basic_conv(
            (conv): ModuleList(
              (0): Conv2d (512, 512, kernel_size=(1, 1), stride=(1, 1), groups=32)
            )
          )
          (5): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True)
          (6): ReLU(inplace)
          (7): conv_squash(num_shared=32)
          (8): basic_conv(
            (conv): ModuleList(
              (0): Conv2d (512, 512, kernel_size=(1, 1), stride=(1, 1), groups=32)
            )
          )
          (9): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True)
          (10): ReLU(inplace)
          (11): conv_squash(num_shared=32)
          (12): basic_conv(
            (conv): ModuleList(
              (0): Conv2d (512, 512, kernel_size=(1, 1), stride=(1, 1), groups=32)
            )
          )
          (13): BatchNorm3d(32, eps=1e-05, momentum=0.1, affine=True)
          (14): ReLU(inplace)
          (15): conv_squash(num_shared=32)
        )
      )
    )
    (final_cls): CapFC(in_cap_num=512, out_cap_num=10, cap_dim=16, fc_manner=default)
  ), weights=((32, 3, 3, 3), (32,), (32,), (32,), (64, 1, 5, 5), (64,), (64, 1, 3, 3), (64,), (64, 1, 1, 1), (64,), (32,), (32,), (64, 32, 3, 3), (64,), (64, 2, 1, 1), (64,), (32,), (32,), (64, 2, 1, 1), (64,), (32,), (32,), (64, 2, 1, 1), (64,), (32,), (32,), (64, 2, 1, 1), (64,), (32,), (32,), (128, 2, 5, 5), (128,), (128, 2, 3, 3), (128,), (128, 2, 1, 1), (128,), (32,), (32,), (128, 64, 3, 3), (128,), (128, 4, 1, 1), (128,), (32,), (32,), (128, 4, 1, 1), (128,), (32,), (32,), (128, 4, 1, 1), (128,), (32,), (32,), (128, 4, 1, 1), (128,), (32,), (32,), (256, 4, 5, 5), (256,), (256, 4, 3, 3), (256,), (256, 4, 1, 1), (256,), (32,), (32,), (256, 128, 3, 3), (256,), (256, 8, 1, 1), (256,), (32,), (32,), (256, 8, 1, 1), (256,), (32,), (32,), (256, 8, 1, 1), (256,), (32,), (32,), (256, 8, 1, 1), (256,), (32,), (32,), (512, 8, 5, 5), (512,), (512, 8, 3, 3), (512,), (512, 8, 1, 1), (512,), (32,), (32,), (512, 256, 3, 3), (512,), (512, 16, 1, 1), (512,), (32,), (32,), (512, 16, 1, 1), (512,), (32,), (32,), (512, 16, 1, 1), (512,), (32,), (32,), (512, 16, 1, 1), (512,), (32,), (32,), (16, 512, 10)), parameters=1892480
)
Total param num # 7.219238 Mb

init learning rate 0.0001000000 at iter 0

[cap_102_v4_1]	epoch/iter [0/600][0/391] ||	Loss: 0.6054, Top1_err: 86.7188, Top5_err: 46.8750 ||	Data/batch time: 0.1280/2.5758
[cap_102_v4_1]	epoch/iter [0/600][100/391] ||	Loss: 0.5305, Top1_err: 89.5421, Top5_err: 50.2321 ||	Data/batch time: 0.0018/0.3952
[cap_102_v4_1]	epoch/iter [0/600][200/391] ||	Loss: 0.5274, Top1_err: 89.6727, Top5_err: 49.9806 ||	Data/batch time: 0.0011/0.3900
[cap_102_v4_1]	epoch/iter [0/600][300/391] ||	Loss: 0.5265, Top1_err: 89.8230, Top5_err: 49.9247 ||	Data/batch time: 0.0009/0.3898
[cap_102_v4_1]	epoch/iter [0/600][390/391] ||	Loss: 0.5260, Top1_err: 89.9340, Top5_err: 49.9660 ||	Data/batch time: 0.0007/0.3933
Summary	epoch/iter [0/600] ||	TRAIN, Top1_err: 89.9340, Top5_err: 49.9660 ||	TEST, Top1_err: 100.0000, Top5_err: 100.0000 ||

model saved at result/cap_102_v4_1/epoch_1.pth
[cap_102_v4_1]	epoch/iter [1/600][0/391] ||	Loss: 0.5259, Top1_err: 92.9688, Top5_err: 53.1250 ||	Data/batch time: 0.1178/0.5234
[cap_102_v4_1]	epoch/iter [1/600][100/391] ||	Loss: 0.5247, Top1_err: 90.4780, Top5_err: 50.5105 ||	Data/batch time: 0.0015/0.3931
[cap_102_v4_1]	epoch/iter [1/600][200/391] ||	Loss: 0.5246, Top1_err: 90.3218, Top5_err: 50.4314 ||	Data/batch time: 0.0010/0.3944
[cap_102_v4_1]	epoch/iter [1/600][300/391] ||	Loss: 0.5245, Top1_err: 90.0306, Top5_err: 50.3634 ||	Data/batch time: 0.0008/0.3945
[cap_102_v4_1]	epoch/iter [1/600][390/391] ||	Loss: 0.5245, Top1_err: 90.0900, Top5_err: 50.3400 ||	Data/batch time: 0.0007/0.3941
Summary	epoch/iter [1/600] ||	TRAIN, Top1_err: 90.0900, Top5_err: 50.3400 ||	TEST, Top1_err: 100.0000, Top5_err: 100.0000 ||

[cap_102_v4_1]	epoch/iter [2/600][0/391] ||	Loss: 0.5251, Top1_err: 87.5000, Top5_err: 53.9062 ||	Data/batch time: 0.1363/0.5018
[cap_102_v4_1]	epoch/iter [2/600][100/391] ||	Loss: 0.5245, Top1_err: 89.9211, Top5_err: 50.0232 ||	Data/batch time: 0.0017/0.3971
[cap_102_v4_1]	epoch/iter [2/600][200/391] ||	Loss: 0.5244, Top1_err: 89.8632, Top5_err: 49.7901 ||	Data/batch time: 0.0011/0.3964
[cap_102_v4_1]	epoch/iter [2/600][300/391] ||	Loss: 0.5244, Top1_err: 89.9865, Top5_err: 50.0908 ||	Data/batch time: 0.0008/0.3956
