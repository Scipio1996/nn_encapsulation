Experiment: base_102_v1_local
------------ Train and Test Options -----------------
KL_factor: 0.1
KL_manner: 1
add_cap_BN_relu: False
add_cap_dropout: False
b_init: zero
base_save_folder: result
batch_size_test: 128
batch_size_train: 128
beta1: 0.9
bigger_input: False
cap_N: 3
cap_model: v1
dataset: cifar10
debug_mode: False
depth: 14
device_id: 0,1
do_squash: False
draw_hist: False
dropout_p: 0.2
experiment_name: base_102_v1_local
fc_time: 0
file_name: result/base_102_v1_local/opt_train_val_START_epoch_0_END_600.txt
fix_m: False
gamma: 0.1
less_data_aug: True
look_into_details: False
loss_form: CE
lr: 0.0001
manual_seed: -1
max_epoch: 600
measure_time: False
momentum: 0.9
multi_crop_test: False
no_visdom: False
non_target_j: False
num_workers: 2
optim: adam
phase: train_val
port_id: 9000
pre_ch_num: 256
primary_cap_num: 32
random_seed: 3805
route_num: 3
s35: True
save_epoch: 25
save_folder: result/base_102_v1_local
schedule: [200, 300, 400]
scheduler: None
setting: top1
show_freq: 100
show_test_after_epoch: 100
squash_manner: paper
use_KL: False
use_cuda: True
use_instanceBN: False
use_multiple: False
w_version: v2
weight_decay: 0.0005
------------------ End --------------------
DataParallel (
  (module): CapsNet (
    (layer1): Sequential (
      (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True)
      (2): ReLU (inplace)
    )
    (cap1_conv): Sequential (
      (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), groups=32)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
      (2): ReLU (inplace)
    )
    (cap1_conv_sub): Sequential (
      (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), groups=32)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
      (2): ReLU (inplace)
    )
    (cap2_conv): Sequential (
      (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32)
      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
      (2): ReLU (inplace)
    )
    (cap2_conv_sub): Sequential (
      (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), groups=32)
      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True)
      (2): ReLU (inplace)
    )
    (cap3_conv): Sequential (
      (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=32)
      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
      (2): ReLU (inplace)
    )
    (cap3_conv_sub): Sequential (
      (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), groups=32)
      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
      (2): ReLU (inplace)
    )
    (cap_layer): CapLayer (
      (W): Conv2d(256, 5120, kernel_size=(1, 1), stride=(1, 1), groups=32)
    )
  ), weights=((32, 3, 3, 3), (32,), (32,), (32,), (64, 1, 1, 1), (64,), (64,), (64,), (64, 2, 1, 1), (64,), (64,), (64,), (128, 2, 3, 3), (128,), (128,), (128,), (128, 4, 1, 1), (128,), (128,), (128,), (256, 4, 3, 3), (256,), (256,), (256,), (256, 8, 1, 1), (256,), (256,), (256,), (5120, 8, 1, 1), (5120,)), parameters=64000
)
Total param num # 0.244141 Mb

init learning rate 0.0001000000 at iter 0

[base_102_v1_local]	epoch/iter [0/600][0/391] ||	Loss: 2.3017, Top1_err: 89.8438, Top5_err: 39.8438 ||	Data/batch time: 0.0656/2.4920
[base_102_v1_local]	epoch/iter [0/600][100/391] ||	Loss: 2.2877, Top1_err: 87.6934, Top5_err: 42.4118 ||	Data/batch time: 0.0031/0.2066
[base_102_v1_local]	epoch/iter [0/600][200/391] ||	Loss: 2.2325, Top1_err: 83.8853, Top5_err: 33.5510 ||	Data/batch time: 0.0028/0.1948
[base_102_v1_local]	epoch/iter [0/600][300/391] ||	Loss: 2.2028, Top1_err: 81.5796, Top5_err: 29.2618 ||	Data/batch time: 0.0021/0.1926
[base_102_v1_local]	epoch/iter [0/600][390/391] ||	Loss: 2.1874, Top1_err: 80.3400, Top5_err: 27.2500 ||	Data/batch time: 0.0017/0.1936
Summary	epoch/iter [0/600] ||	TRAIN, Top1_err: 80.3400, Top5_err: 27.2500 ||	TEST, Top1_err: 100.0000, Top5_err: 100.0000 ||

model saved at result/base_102_v1_local/epoch_1.pth
[base_102_v1_local]	epoch/iter [1/600][0/391] ||	Loss: 2.1445, Top1_err: 70.3125, Top5_err: 23.4375 ||	Data/batch time: 0.0835/0.3031
[base_102_v1_local]	epoch/iter [1/600][100/391] ||	Loss: 2.1257, Top1_err: 75.6265, Top5_err: 19.5003 ||	Data/batch time: 0.0012/0.1904
[base_102_v1_local]	epoch/iter [1/600][200/391] ||	Loss: 2.1225, Top1_err: 75.0039, Top5_err: 19.0104 ||	Data/batch time: 0.0007/0.1923
[base_102_v1_local]	epoch/iter [1/600][300/391] ||	Loss: 2.1192, Top1_err: 74.7067, Top5_err: 18.8382 ||	Data/batch time: 0.0006/0.1938
[base_102_v1_local]	epoch/iter [1/600][390/391] ||	Loss: 2.1166, Top1_err: 74.3720, Top5_err: 18.5480 ||	Data/batch time: 0.0006/0.1945
Summary	epoch/iter [1/600] ||	TRAIN, Top1_err: 74.3720, Top5_err: 18.5480 ||	TEST, Top1_err: 100.0000, Top5_err: 100.0000 ||

[base_102_v1_local]	epoch/iter [2/600][0/391] ||	Loss: 2.1218, Top1_err: 73.4375, Top5_err: 21.0938 ||	Data/batch time: 0.0850/0.2544
[base_102_v1_local]	epoch/iter [2/600][100/391] ||	Loss: 2.1028, Top1_err: 72.3778, Top5_err: 17.4350 ||	Data/batch time: 0.0011/0.1981
[base_102_v1_local]	epoch/iter [2/600][200/391] ||	Loss: 2.1021, Top1_err: 72.4580, Top5_err: 17.2847 ||	Data/batch time: 0.0008/0.1975
[base_102_v1_local]	epoch/iter [2/600][300/391] ||	Loss: 2.0997, Top1_err: 72.4304, Top5_err: 16.9799 ||	Data/batch time: 0.0006/0.1977
[base_102_v1_local]	epoch/iter [2/600][390/391] ||	Loss: 2.0994, Top1_err: 72.5020, Top5_err: 16.8940 ||	Data/batch time: 0.0005/0.1975
Summary	epoch/iter [2/600] ||	TRAIN, Top1_err: 72.5020, Top5_err: 16.8940 ||	TEST, Top1_err: 100.0000, Top5_err: 100.0000 ||

[base_102_v1_local]	epoch/iter [3/600][0/391] ||	Loss: 2.1141, Top1_err: 74.2188, Top5_err: 17.1875 ||	Data/batch time: 0.0872/0.2560
[base_102_v1_local]	epoch/iter [3/600][100/391] ||	Loss: 2.0934, Top1_err: 71.9059, Top5_err: 16.6615 ||	Data/batch time: 0.0012/0.1976
[base_102_v1_local]	epoch/iter [3/600][200/391] ||	Loss: 2.0919, Top1_err: 71.7390, Top5_err: 16.2586 ||	Data/batch time: 0.0008/0.1974
