Experiment: cifar_base_104_no_relu_investigate_b_rand
------------ Training Options -------------
KL_factor: 0.1
KL_manner: 1
add_cap_dropout: False
b_init: rand
beta1: 0.9
cap_N: 3
cap_model: v0
dataset: cifar10
debug: True
deploy: False
do_squash: False
draw_hist: False
dropout_p: 0.2
epochs: 300
experiment_name: cifar_base_104_no_relu_investigate_b_rand
file_name: result/cifar_base_104_no_relu_investigate_b_rand/train/opt_train_start_epoch_1_end_300.txt
fix_m: False
gamma: 0.1
has_relu_in_W: False
look_into_details: False
lr: 0.01
manual_seed: 6367
max_epoch: 300
model_cifar: capsule
momentum: 0.9
multi_crop_test: True
non_target_j: False
num_workers: 2
optim: rmsprop
phase: train
port: 4000
route_num: 2
save_epoch: 20
save_folder: result/cifar_base_104_no_relu_investigate_b_rand/train
schedule_cifar: [150, 225]
scheduler: None
send_images_to_visdom: False
show_freq: 5
show_test_after_epoch: -1
start_epoch: 1
test_batch: 128
test_only: False
train_batch: 128
use_CE_loss: False
use_KL: False
use_cuda: True
use_spread_loss: False
visdom: True
w_version: v2
weight_decay: 0.0005
------------------ End --------------------
CapsNet (
  (conv1): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
  (relu): ReLU (inplace)
  (layer1): Sequential (
    (0): BasicBlock (
      (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
      (relu): ReLU (inplace)
      (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
    )
    (1): BasicBlock (
      (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
      (relu): ReLU (inplace)
      (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
    )
    (2): BasicBlock (
      (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
      (relu): ReLU (inplace)
      (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
    )
  )
  (layer2): Sequential (
    (0): BasicBlock (
      (conv1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True)
      (relu): ReLU (inplace)
      (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True)
      (downsample): Sequential (
        (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True)
      )
    )
    (1): BasicBlock (
      (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True)
      (relu): ReLU (inplace)
      (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True)
    )
    (2): BasicBlock (
      (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True)
      (relu): ReLU (inplace)
      (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True)
    )
  )
  (layer3): Sequential (
    (0): BasicBlock (
      (conv1): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
      (relu): ReLU (inplace)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
      (downsample): Sequential (
        (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
      )
    )
    (1): BasicBlock (
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
      (relu): ReLU (inplace)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
    )
    (2): BasicBlock (
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
      (relu): ReLU (inplace)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
    )
  )
  (tranfer_conv): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1))
  (tranfer_bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
  (tranfer_relu): ReLU (inplace)
  (cap_layer): CapLayer (
    (W): Conv2d(256, 5120, kernel_size=(1, 1), stride=(1, 1), groups=32)
  )
)

init learning rate 0.010000 at iter 0

Train [cifar_base_104_no_relu_investigate_b_rand]	epoch [0/300]	iter [0/391]		data: 0.112s | batch: 0.995s	loss: 3.03366	acc: 14.84375	acc5: 50.78125
Train [cifar_base_104_no_relu_investigate_b_rand]	epoch [0/300]	iter [5/391]		data: 0.021s | batch: 0.248s	loss: 3.53943	acc: 11.06771	acc5: 49.60938
Train [cifar_base_104_no_relu_investigate_b_rand]	epoch [0/300]	iter [10/391]		data: 0.012s | batch: 0.180s	loss: 3.58715	acc: 12.00284	acc5: 49.85795
Train [cifar_base_104_no_relu_investigate_b_rand]	epoch [0/300]	iter [15/391]		data: 0.009s | batch: 0.155s	loss: 3.60510	acc: 11.27930	acc5: 50.39062
Train [cifar_base_104_no_relu_investigate_b_rand]	epoch [0/300]	iter [20/391]		data: 0.007s | batch: 0.142s	loss: 3.61448	acc: 10.90030	acc5: 50.40923
Train [cifar_base_104_no_relu_investigate_b_rand]	epoch [0/300]	iter [25/391]		data: 0.006s | batch: 0.134s	loss: 3.62024	acc: 10.48678	acc5: 50.09014
Train [cifar_base_104_no_relu_investigate_b_rand]	epoch [0/300]	iter [30/391]		data: 0.006s | batch: 0.128s	loss: 3.62411	acc: 10.33266	acc5: 49.74798
Train [cifar_base_104_no_relu_investigate_b_rand]	epoch [0/300]	iter [35/391]		data: 0.005s | batch: 0.124s	loss: 3.62685	acc: 10.13455	acc5: 49.78299
Train [cifar_base_104_no_relu_investigate_b_rand]	epoch [0/300]	iter [40/391]		data: 0.005s | batch: 0.121s	loss: 3.62880	acc: 10.25152	acc5: 49.79040
Train [cifar_base_104_no_relu_investigate_b_rand]	epoch [0/300]	iter [45/391]		data: 0.005s | batch: 0.119s	loss: 3.62896	acc: 10.42799	acc5: 49.88111
Train [cifar_base_104_no_relu_investigate_b_rand]	epoch [0/300]	iter [50/391]		data: 0.004s | batch: 0.118s	loss: 3.63009	acc: 10.26348	acc5: 49.92341
Train [cifar_base_104_no_relu_investigate_b_rand]	epoch [0/300]	iter [55/391]		data: 0.004s | batch: 0.116s	loss: 3.63096	acc: 10.29576	acc5: 49.93025
Train [cifar_base_104_no_relu_investigate_b_rand]	epoch [0/300]	iter [60/391]		data: 0.004s | batch: 0.115s	loss: 3.62965	acc: 10.34836	acc5: 49.97439
Train [cifar_base_104_no_relu_investigate_b_rand]	epoch [0/300]	iter [65/391]		data: 0.004s | batch: 0.114s	loss: 3.62793	acc: 10.27462	acc5: 50.07102
