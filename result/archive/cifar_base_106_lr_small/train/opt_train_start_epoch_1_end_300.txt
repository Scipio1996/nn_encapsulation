Experiment: cifar_base_106_lr_small
------------ Training Options -------------
KL_factor: 0.1
KL_manner: 1
add_cap_dropout: False
b_init: zero
beta1: 0.8
cap_N: 3
cap_model: v0
dataset: cifar10
debug: True
deploy: False
do_squash: False
draw_hist: False
dropout_p: 0.2
epochs: 300
experiment_name: cifar_base_106_lr_small
file_name: result/cifar_base_106_lr_small/train/opt_train_start_epoch_1_end_300.txt
fix_m: False
gamma: 0.1
has_relu_in_W: False
look_into_details: False
lr: 0.01
manual_seed: 540
max_epoch: 300
model_cifar: capsule
momentum: 0.9
multi_crop_test: True
non_target_j: False
num_workers: 2
optim: sgd
phase: train
port: 4000
route_num: 4
save_epoch: 20
save_folder: result/cifar_base_106_lr_small/train
schedule_cifar: [150, 225]
scheduler: None
send_images_to_visdom: False
show_freq: 5
show_test_after_epoch: -1
skip_pre_squash: False
skip_pre_transfer: False
start_epoch: 1
test_batch: 128
test_only: False
train_batch: 128
use_CE_loss: True
use_KL: False
use_cuda: True
use_spread_loss: False
visdom: True
w_version: v2
weight_decay: 0.0005
------------------ End --------------------
CapsNet (
  (conv1): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
  (relu): ReLU (inplace)
  (layer1): Sequential (
    (0): BasicBlock (
      (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
      (relu): ReLU (inplace)
      (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
    )
    (1): BasicBlock (
      (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
      (relu): ReLU (inplace)
      (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
    )
    (2): BasicBlock (
      (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
      (relu): ReLU (inplace)
      (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
    )
  )
  (layer2): Sequential (
    (0): BasicBlock (
      (conv1): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True)
      (relu): ReLU (inplace)
      (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True)
      (downsample): Sequential (
        (0): Conv2d(16, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True)
      )
    )
    (1): BasicBlock (
      (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True)
      (relu): ReLU (inplace)
      (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True)
    )
    (2): BasicBlock (
      (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True)
      (relu): ReLU (inplace)
      (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True)
    )
  )
  (layer3): Sequential (
    (0): BasicBlock (
      (conv1): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
      (relu): ReLU (inplace)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
      (downsample): Sequential (
        (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
      )
    )
    (1): BasicBlock (
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
      (relu): ReLU (inplace)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
    )
    (2): BasicBlock (
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
      (relu): ReLU (inplace)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
    )
  )
  (tranfer_conv): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1))
  (tranfer_bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True)
  (tranfer_relu): ReLU (inplace)
  (cap_layer): CapLayer (
    (W): Conv2d(256, 5120, kernel_size=(1, 1), stride=(1, 1), groups=32)
  )
)

init learning rate 0.010000 at iter 0

Train [cifar_base_106_lr_small]	epoch [0/300]	iter [0/391]		data: 0.096s | batch: 0.840s	loss: 2.30213	acc: 15.62500	acc5: 51.56250
Train [cifar_base_106_lr_small]	epoch [0/300]	iter [5/391]		data: 0.018s | batch: 0.241s	loss: 2.30021	acc: 11.32812	acc5: 57.42188
Train [cifar_base_106_lr_small]	epoch [0/300]	iter [10/391]		data: 0.011s | batch: 0.188s	loss: 2.29984	acc: 12.14489	acc5: 55.89489
Train [cifar_base_106_lr_small]	epoch [0/300]	iter [15/391]		data: 0.008s | batch: 0.169s	loss: 2.29893	acc: 12.10938	acc5: 55.56641
Train [cifar_base_106_lr_small]	epoch [0/300]	iter [20/391]		data: 0.007s | batch: 0.158s	loss: 2.29779	acc: 12.64881	acc5: 55.20833
Train [cifar_base_106_lr_small]	epoch [0/300]	iter [25/391]		data: 0.006s | batch: 0.152s	loss: 2.29787	acc: 12.74038	acc5: 55.22837
Train [cifar_base_106_lr_small]	epoch [0/300]	iter [30/391]		data: 0.005s | batch: 0.148s	loss: 2.29746	acc: 13.05444	acc5: 55.44355
Train [cifar_base_106_lr_small]	epoch [0/300]	iter [35/391]		data: 0.005s | batch: 0.145s	loss: 2.29749	acc: 13.19444	acc5: 55.31684
Train [cifar_base_106_lr_small]	epoch [0/300]	iter [40/391]		data: 0.005s | batch: 0.142s	loss: 2.29733	acc: 13.03354	acc5: 55.27820
Train [cifar_base_106_lr_small]	epoch [0/300]	iter [45/391]		data: 0.004s | batch: 0.140s	loss: 2.29681	acc: 12.78872	acc5: 55.09511
Train [cifar_base_106_lr_small]	epoch [0/300]	iter [50/391]		data: 0.004s | batch: 0.139s	loss: 2.29667	acc: 12.60723	acc5: 54.94792
Train [cifar_base_106_lr_small]	epoch [0/300]	iter [55/391]		data: 0.004s | batch: 0.138s	loss: 2.29625	acc: 12.66741	acc5: 55.17578
