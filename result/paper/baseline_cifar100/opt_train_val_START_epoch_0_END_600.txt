Experiment: baseline_cifar100
------------ Train and Test Options -----------------
C_form: l2
base_save_folder: result/paper
batch_size_test: 128
batch_size_train: 128
beta1: 0.9
cap_model: v_base
coeff_dimwise: False
dataset: cifar100
debug_mode: True
depth: 14
device_id: 
draw_hist: False
encapsulate_G: False
experiment_name: baseline_cifar100
file_name: result/paper/baseline_cifar100/opt_train_val_START_epoch_0_END_600.txt
gamma: 0.1
less_data_aug: True
loss_fac: 1.0
loss_form: CE
lr: 0.0001
manual_seed: -1
max_epoch: 600
measure_time: False
momentum: 0.9
multi_crop_test: False
net_config: default
no_bp_P_L: False
no_visdom: False
non_target_j: False
num_workers: 2
optim: rmsprop
ot_loss: False
ot_loss_fac: 1.0
phase: train_val
port_id: 9000
random_seed: 8996
remove_bias: False
s35: True
save_epoch: 1
save_folder: result/paper/baseline_cifar100
schedule: [200, 300, 400]
show_freq: 1
show_test_after_epoch: 0
skip_critic: False
skip_relu: False
use_capBN: False
use_cuda: False
weight_decay: 0.0005
withCapRoute: False
------------------ End --------------------
CapNet (
  (conv1): Conv2d (3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False), weights=((16, 3, 3, 3),), parameters=432
  (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True), weights=((16,), (16,)), parameters=32
  (relu): ReLU(inplace), weights=(), parameters=0
  (layer1): Sequential (
    (0): BasicBlock(
      (conv1): Conv2d (16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
      (relu): ReLU(inplace)
      (conv2): Conv2d (16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
    ), weights=((16, 16, 3, 3), (16,), (16,), (16, 16, 3, 3), (16,), (16,)), parameters=4672
    (1): BasicBlock(
      (conv1): Conv2d (16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
      (relu): ReLU(inplace)
      (conv2): Conv2d (16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True)
    ), weights=((16, 16, 3, 3), (16,), (16,), (16, 16, 3, 3), (16,), (16,)), parameters=4672
  ), weights=((16, 16, 3, 3), (16,), (16,), (16, 16, 3, 3), (16,), (16,), (16, 16, 3, 3), (16,), (16,), (16, 16, 3, 3), (16,), (16,)), parameters=9344
  (layer2): Sequential (
    (0): BasicBlock(
      (conv1): Conv2d (16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True)
      (relu): ReLU(inplace)
      (conv2): Conv2d (32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True)
      (downsample): Sequential(
        (0): Conv2d (16, 32, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True)
      )
    ), weights=((32, 16, 3, 3), (32,), (32,), (32, 32, 3, 3), (32,), (32,), (32, 16, 1, 1), (32,), (32,)), parameters=14528
    (1): BasicBlock(
      (conv1): Conv2d (32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True)
      (relu): ReLU(inplace)
      (conv2): Conv2d (32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True)
    ), weights=((32, 32, 3, 3), (32,), (32,), (32, 32, 3, 3), (32,), (32,)), parameters=18560
  ), weights=((32, 16, 3, 3), (32,), (32,), (32, 32, 3, 3), (32,), (32,), (32, 16, 1, 1), (32,), (32,), (32, 32, 3, 3), (32,), (32,), (32, 32, 3, 3), (32,), (32,)), parameters=33088
  (layer3): Sequential (
    (0): BasicBlock(
      (conv1): Conv2d (32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
      (relu): ReLU(inplace)
      (conv2): Conv2d (64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
      (downsample): Sequential(
        (0): Conv2d (32, 64, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
      )
    ), weights=((64, 32, 3, 3), (64,), (64,), (64, 64, 3, 3), (64,), (64,), (64, 32, 1, 1), (64,), (64,)), parameters=57728
    (1): BasicBlock(
      (conv1): Conv2d (64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
      (relu): ReLU(inplace)
      (conv2): Conv2d (64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True)
    ), weights=((64, 64, 3, 3), (64,), (64,), (64, 64, 3, 3), (64,), (64,)), parameters=73984
  ), weights=((64, 32, 3, 3), (64,), (64,), (64, 64, 3, 3), (64,), (64,), (64, 32, 1, 1), (64,), (64,), (64, 64, 3, 3), (64,), (64,), (64, 64, 3, 3), (64,), (64,)), parameters=131712
  (avgpool): AvgPool2d(kernel_size=8, stride=1, padding=0, ceil_mode=False, count_include_pad=True), weights=(), parameters=0
  (fc): Linear(in_features=64, out_features=100), weights=((100, 64), (100,)), parameters=6500
)
Total param num # 0.690872 Mb

init learning rate 0.0001000000 at iter 0

[baseline_cifar100]	epoch/iter [0/600][0/391] ||	Loss: 5.6573, Top1_err: 99.2188, Top5_err: 95.3125 ||	Data/batch time: 0.0420/0.6899
[baseline_cifar100]	epoch/iter [0/600][1/391] ||	Loss: 5.5255, Top1_err: 99.2188, Top5_err: 94.5312 ||	Data/batch time: 0.0270/0.6323
[baseline_cifar100]	epoch/iter [0/600][2/391] ||	Loss: 5.4030, Top1_err: 98.6979, Top5_err: 94.5312 ||	Data/batch time: 0.0215/0.6056
[baseline_cifar100]	epoch/iter [0/600][3/391] ||	Loss: 5.3603, Top1_err: 99.0234, Top5_err: 94.7266 ||	Data/batch time: 0.0184/0.5892
[baseline_cifar100]	epoch/iter [0/600][4/391] ||	Loss: 5.3447, Top1_err: 98.7500, Top5_err: 94.2188 ||	Data/batch time: 0.0163/0.5839
[baseline_cifar100]	epoch/iter [0/600][5/391] ||	Loss: 5.3147, Top1_err: 98.8281, Top5_err: 94.4010 ||	Data/batch time: 0.0150/0.5778
[baseline_cifar100]	epoch/iter [0/600][6/391] ||	Loss: 5.2955, Top1_err: 98.9955, Top5_err: 94.5312 ||	Data/batch time: 0.0142/0.5677
[baseline_cifar100]	epoch/iter [0/600][7/391] ||	Loss: 5.2823, Top1_err: 99.0234, Top5_err: 94.3359 ||	Data/batch time: 0.0135/0.5623
[baseline_cifar100]	epoch/iter [0/600][8/391] ||	Loss: 5.2607, Top1_err: 98.9583, Top5_err: 93.8368 ||	Data/batch time: 0.0130/0.5632
[baseline_cifar100]	epoch/iter [0/600][9/391] ||	Loss: 5.2413, Top1_err: 98.8281, Top5_err: 93.6719 ||	Data/batch time: 0.0126/0.5618
[baseline_cifar100]	epoch/iter [0/600][10/391] ||	Loss: 5.2121, Top1_err: 98.7926, Top5_err: 93.7500 ||	Data/batch time: 0.0122/0.5601
[baseline_cifar100]	epoch/iter [0/600][11/391] ||	Loss: 5.2014, Top1_err: 98.6328, Top5_err: 93.6198 ||	Data/batch time: 0.0120/0.5592
[baseline_cifar100]	epoch/iter [0/600][12/391] ||	Loss: 5.1739, Top1_err: 98.5577, Top5_err: 93.5697 ||	Data/batch time: 0.0117/0.5599
[baseline_cifar100]	epoch/iter [0/600][13/391] ||	Loss: 5.1505, Top1_err: 98.4375, Top5_err: 93.4710 ||	Data/batch time: 0.0115/0.5615
[baseline_cifar100]	epoch/iter [0/600][14/391] ||	Loss: 5.1258, Top1_err: 98.2292, Top5_err: 93.2292 ||	Data/batch time: 0.0114/0.5593
[baseline_cifar100]	epoch/iter [0/600][15/391] ||	Loss: 5.1008, Top1_err: 97.9980, Top5_err: 92.8711 ||	Data/batch time: 0.0112/0.5541
[baseline_cifar100]	epoch/iter [0/600][16/391] ||	Loss: 5.0859, Top1_err: 97.9320, Top5_err: 92.8309 ||	Data/batch time: 0.0111/0.5511
[baseline_cifar100]	epoch/iter [0/600][17/391] ||	Loss: 5.0671, Top1_err: 97.7865, Top5_err: 92.6649 ||	Data/batch time: 0.0110/0.5509
[baseline_cifar100]	epoch/iter [0/600][18/391] ||	Loss: 5.0487, Top1_err: 97.7796, Top5_err: 92.5576 ||	Data/batch time: 0.0109/0.5489
[baseline_cifar100]	epoch/iter [0/600][19/391] ||	Loss: 5.0303, Top1_err: 97.7344, Top5_err: 92.3047 ||	Data/batch time: 0.0108/0.5473
[baseline_cifar100]	epoch/iter [0/600][20/391] ||	Loss: 5.0106, Top1_err: 97.6935, Top5_err: 92.0015 ||	Data/batch time: 0.0109/0.5455
[baseline_cifar100]	epoch/iter [0/600][21/391] ||	Loss: 4.9936, Top1_err: 97.6918, Top5_err: 91.6548 ||	Data/batch time: 0.0108/0.5453
[baseline_cifar100]	epoch/iter [0/600][22/391] ||	Loss: 4.9692, Top1_err: 97.5543, Top5_err: 91.2024 ||	Data/batch time: 0.0107/0.5454
[baseline_cifar100]	epoch/iter [0/600][23/391] ||	Loss: 4.9502, Top1_err: 97.4609, Top5_err: 90.8854 ||	Data/batch time: 0.0106/0.5447
[baseline_cifar100]	epoch/iter [0/600][24/391] ||	Loss: 4.9319, Top1_err: 97.4375, Top5_err: 90.5938 ||	Data/batch time: 0.0106/0.5437
[baseline_cifar100]	epoch/iter [0/600][25/391] ||	Loss: 4.9190, Top1_err: 97.3558, Top5_err: 90.3846 ||	Data/batch time: 0.0106/0.5428
[baseline_cifar100]	epoch/iter [0/600][26/391] ||	Loss: 4.9042, Top1_err: 97.2222, Top5_err: 90.2199 ||	Data/batch time: 0.0106/0.5431
[baseline_cifar100]	epoch/iter [0/600][27/391] ||	Loss: 4.8923, Top1_err: 97.2377, Top5_err: 90.1228 ||	Data/batch time: 0.0105/0.5425
[baseline_cifar100]	epoch/iter [0/600][28/391] ||	Loss: 4.8845, Top1_err: 97.2522, Top5_err: 90.0862 ||	Data/batch time: 0.0105/0.5438
[baseline_cifar100]	epoch/iter [0/600][29/391] ||	Loss: 4.8753, Top1_err: 97.2917, Top5_err: 90.0260 ||	Data/batch time: 0.0105/0.5444
[baseline_cifar100]	epoch/iter [0/600][30/391] ||	Loss: 4.8625, Top1_err: 97.2530, Top5_err: 89.8438 ||	Data/batch time: 0.0104/0.5447
[baseline_cifar100]	epoch/iter [0/600][31/391] ||	Loss: 4.8453, Top1_err: 97.1680, Top5_err: 89.5508 ||	Data/batch time: 0.0104/0.5461
[baseline_cifar100]	epoch/iter [0/600][32/391] ||	Loss: 4.8308, Top1_err: 97.1354, Top5_err: 89.3466 ||	Data/batch time: 0.0104/0.5479
[baseline_cifar100]	epoch/iter [0/600][33/391] ||	Loss: 4.8166, Top1_err: 97.0818, Top5_err: 89.1085 ||	Data/batch time: 0.0104/0.5487
[baseline_cifar100]	epoch/iter [0/600][34/391] ||	Loss: 4.8021, Top1_err: 96.9866, Top5_err: 88.8839 ||	Data/batch time: 0.0104/0.5489
[baseline_cifar100]	epoch/iter [0/600][35/391] ||	Loss: 4.7909, Top1_err: 96.9835, Top5_err: 88.7153 ||	Data/batch time: 0.0104/0.5491
[baseline_cifar100]	epoch/iter [0/600][36/391] ||	Loss: 4.7825, Top1_err: 97.0017, Top5_err: 88.4291 ||	Data/batch time: 0.0104/0.5492
[baseline_cifar100]	epoch/iter [0/600][37/391] ||	Loss: 4.7749, Top1_err: 97.0189, Top5_err: 88.4046 ||	Data/batch time: 0.0104/0.5479
[baseline_cifar100]	epoch/iter [0/600][38/391] ||	Loss: 4.7639, Top1_err: 96.9551, Top5_err: 88.2612 ||	Data/batch time: 0.0103/0.5481
[baseline_cifar100]	epoch/iter [0/600][39/391] ||	Loss: 4.7536, Top1_err: 96.8945, Top5_err: 88.1055 ||	Data/batch time: 0.0103/0.5485
[baseline_cifar100]	epoch/iter [0/600][40/391] ||	Loss: 4.7410, Top1_err: 96.7797, Top5_err: 87.9192 ||	Data/batch time: 0.0103/0.5483
[baseline_cifar100]	epoch/iter [0/600][41/391] ||	Loss: 4.7310, Top1_err: 96.7262, Top5_err: 87.6674 ||	Data/batch time: 0.0103/0.5479
[baseline_cifar100]	epoch/iter [0/600][42/391] ||	Loss: 4.7199, Top1_err: 96.6025, Top5_err: 87.3910 ||	Data/batch time: 0.0104/0.5486
[baseline_cifar100]	epoch/iter [0/600][43/391] ||	Loss: 4.7105, Top1_err: 96.5909, Top5_err: 87.2337 ||	Data/batch time: 0.0103/0.5491
[baseline_cifar100]	epoch/iter [0/600][44/391] ||	Loss: 4.6999, Top1_err: 96.4931, Top5_err: 87.0486 ||	Data/batch time: 0.0103/0.5499
[baseline_cifar100]	epoch/iter [0/600][45/391] ||	Loss: 4.6907, Top1_err: 96.5353, Top5_err: 86.9226 ||	Data/batch time: 0.0103/0.5503
[baseline_cifar100]	epoch/iter [0/600][46/391] ||	Loss: 4.6799, Top1_err: 96.5093, Top5_err: 86.7021 ||	Data/batch time: 0.0103/0.5495
[baseline_cifar100]	epoch/iter [0/600][47/391] ||	Loss: 4.6690, Top1_err: 96.3704, Top5_err: 86.4421 ||	Data/batch time: 0.0103/0.5498
[baseline_cifar100]	epoch/iter [0/600][48/391] ||	Loss: 4.6606, Top1_err: 96.3170, Top5_err: 86.3042 ||	Data/batch time: 0.0103/0.5499
[baseline_cifar100]	epoch/iter [0/600][49/391] ||	Loss: 4.6546, Top1_err: 96.2812, Top5_err: 86.2188 ||	Data/batch time: 0.0103/0.5502
[baseline_cifar100]	epoch/iter [0/600][50/391] ||	Loss: 4.6453, Top1_err: 96.1857, Top5_err: 86.0141 ||	Data/batch time: 0.0103/0.5494
[baseline_cifar100]	epoch/iter [0/600][51/391] ||	Loss: 4.6383, Top1_err: 96.1388, Top5_err: 85.8774 ||	Data/batch time: 0.0103/0.5490
[baseline_cifar100]	epoch/iter [0/600][52/391] ||	Loss: 4.6305, Top1_err: 96.1232, Top5_err: 85.7311 ||	Data/batch time: 0.0103/0.5492
[baseline_cifar100]	epoch/iter [0/600][53/391] ||	Loss: 4.6261, Top1_err: 96.1661, Top5_err: 85.7784 ||	Data/batch time: 0.0103/0.5498
[baseline_cifar100]	epoch/iter [0/600][54/391] ||	Loss: 4.6185, Top1_err: 96.1222, Top5_err: 85.6534 ||	Data/batch time: 0.0103/0.5497
[baseline_cifar100]	epoch/iter [0/600][55/391] ||	Loss: 4.6106, Top1_err: 96.0240, Top5_err: 85.5050 ||	Data/batch time: 0.0103/0.5485
[baseline_cifar100]	epoch/iter [0/600][56/391] ||	Loss: 4.6034, Top1_err: 96.0115, Top5_err: 85.4304 ||	Data/batch time: 0.0104/0.5479
[baseline_cifar100]	epoch/iter [0/600][57/391] ||	Loss: 4.5963, Top1_err: 95.9456, Top5_err: 85.3314 ||	Data/batch time: 0.0104/0.5484
[baseline_cifar100]	epoch/iter [0/600][58/391] ||	Loss: 4.5886, Top1_err: 95.8024, Top5_err: 85.1960 ||	Data/batch time: 0.0104/0.5483
[baseline_cifar100]	epoch/iter [0/600][59/391] ||	Loss: 4.5829, Top1_err: 95.7682, Top5_err: 85.0911 ||	Data/batch time: 0.0106/0.5479
[baseline_cifar100]	epoch/iter [0/600][60/391] ||	Loss: 4.5772, Top1_err: 95.7351, Top5_err: 85.0154 ||	Data/batch time: 0.0106/0.5482
[baseline_cifar100]	epoch/iter [0/600][61/391] ||	Loss: 4.5720, Top1_err: 95.6905, Top5_err: 84.9294 ||	Data/batch time: 0.0106/0.5483
[baseline_cifar100]	epoch/iter [0/600][62/391] ||	Loss: 4.5648, Top1_err: 95.6225, Top5_err: 84.7346 ||	Data/batch time: 0.0106/0.5480
[baseline_cifar100]	epoch/iter [0/600][63/391] ||	Loss: 4.5600, Top1_err: 95.5688, Top5_err: 84.6191 ||	Data/batch time: 0.0106/0.5481
[baseline_cifar100]	epoch/iter [0/600][64/391] ||	Loss: 4.5531, Top1_err: 95.5288, Top5_err: 84.4952 ||	Data/batch time: 0.0106/0.5489
[baseline_cifar100]	epoch/iter [0/600][65/391] ||	Loss: 4.5479, Top1_err: 95.4782, Top5_err: 84.3750 ||	Data/batch time: 0.0107/0.5496
[baseline_cifar100]	epoch/iter [0/600][66/391] ||	Loss: 4.5446, Top1_err: 95.4874, Top5_err: 84.3867 ||	Data/batch time: 0.0107/0.5495
[baseline_cifar100]	epoch/iter [0/600][67/391] ||	Loss: 4.5405, Top1_err: 95.5078, Top5_err: 84.3405 ||	Data/batch time: 0.0107/0.5499
[baseline_cifar100]	epoch/iter [0/600][68/391] ||	Loss: 4.5337, Top1_err: 95.4484, Top5_err: 84.2278 ||	Data/batch time: 0.0107/0.5497
[baseline_cifar100]	epoch/iter [0/600][69/391] ||	Loss: 4.5296, Top1_err: 95.4353, Top5_err: 84.1295 ||	Data/batch time: 0.0107/0.5502
[baseline_cifar100]	epoch/iter [0/600][70/391] ||	Loss: 4.5260, Top1_err: 95.3895, Top5_err: 84.0449 ||	Data/batch time: 0.0107/0.5503
[baseline_cifar100]	epoch/iter [0/600][71/391] ||	Loss: 4.5202, Top1_err: 95.2908, Top5_err: 83.8433 ||	Data/batch time: 0.0107/0.5507
[baseline_cifar100]	epoch/iter [0/600][72/391] ||	Loss: 4.5139, Top1_err: 95.2911, Top5_err: 83.7008 ||	Data/batch time: 0.0107/0.5512
[baseline_cifar100]	epoch/iter [0/600][73/391] ||	Loss: 4.5075, Top1_err: 95.2175, Top5_err: 83.5938 ||	Data/batch time: 0.0108/0.5515
[baseline_cifar100]	epoch/iter [0/600][74/391] ||	Loss: 4.5007, Top1_err: 95.1979, Top5_err: 83.4375 ||	Data/batch time: 0.0108/0.5520
[baseline_cifar100]	epoch/iter [0/600][75/391] ||	Loss: 4.4937, Top1_err: 95.1583, Top5_err: 83.2442 ||	Data/batch time: 0.0108/0.5518
[baseline_cifar100]	epoch/iter [0/600][76/391] ||	Loss: 4.4896, Top1_err: 95.0994, Top5_err: 83.1473 ||	Data/batch time: 0.0108/0.5517
[baseline_cifar100]	epoch/iter [0/600][77/391] ||	Loss: 4.4864, Top1_err: 95.0921, Top5_err: 83.1330 ||	Data/batch time: 0.0108/0.5510
[baseline_cifar100]	epoch/iter [0/600][78/391] ||	Loss: 4.4824, Top1_err: 95.0554, Top5_err: 83.0597 ||	Data/batch time: 0.0108/0.5515
[baseline_cifar100]	epoch/iter [0/600][79/391] ||	Loss: 4.4789, Top1_err: 95.0488, Top5_err: 82.9785 ||	Data/batch time: 0.0108/0.5512
[baseline_cifar100]	epoch/iter [0/600][80/391] ||	Loss: 4.4737, Top1_err: 94.9846, Top5_err: 82.8704 ||	Data/batch time: 0.0108/0.5512
[baseline_cifar100]	epoch/iter [0/600][81/391] ||	Loss: 4.4679, Top1_err: 94.9314, Top5_err: 82.7363 ||	Data/batch time: 0.0109/0.5511
[baseline_cifar100]	epoch/iter [0/600][82/391] ||	Loss: 4.4633, Top1_err: 94.9078, Top5_err: 82.6619 ||	Data/batch time: 0.0109/0.5510
[baseline_cifar100]	epoch/iter [0/600][83/391] ||	Loss: 4.4595, Top1_err: 94.9126, Top5_err: 82.6172 ||	Data/batch time: 0.0109/0.5510
[baseline_cifar100]	epoch/iter [0/600][84/391] ||	Loss: 4.4557, Top1_err: 94.9173, Top5_err: 82.5551 ||	Data/batch time: 0.0109/0.5510
[baseline_cifar100]	epoch/iter [0/600][85/391] ||	Loss: 4.4519, Top1_err: 94.9219, Top5_err: 82.5309 ||	Data/batch time: 0.0109/0.5511
[baseline_cifar100]	epoch/iter [0/600][86/391] ||	Loss: 4.4469, Top1_err: 94.8635, Top5_err: 82.4174 ||	Data/batch time: 0.0109/0.5511
[baseline_cifar100]	epoch/iter [0/600][87/391] ||	Loss: 4.4429, Top1_err: 94.8331, Top5_err: 82.3420 ||	Data/batch time: 0.0109/0.5509
[baseline_cifar100]	epoch/iter [0/600][88/391] ||	Loss: 4.4398, Top1_err: 94.8473, Top5_err: 82.3034 ||	Data/batch time: 0.0109/0.5507
